=== Dragon 32 emulator in Python

A Open source (GPL v3 or later) emulator for the 30years old homecomputer {{{Dragon 32}}}...

It's in a eary development state and not usable, yet.
A usable Dragon / CoCo emulator is [[http://www.6809.org.uk/dragon/xroar.shtml|XRoar]].

DragonPy will not be a second XRoar written in Python.
This project is primarily to lean and understand.

The first target is to be able to run sbc09 and the Simple6809 design.
sbc09 stands for Lennart Benschop 6809 Single Board Computer, read: [[https://github.com/jedie/DragonPy/tree/master/sbc09|/sbc09/README]]
More info about Simple6809, read: [[https://github.com/jedie/DragonPy/blob/master/Simple6809/README.creole|/Simple6809/README.creole]]

Future goals are:
* run Dragon 32 ROMs (maybe in far future: Dragon 64)
* Implement a integrated development environment for BASIC programs


== example

Start Simple6809 (with many debug output):
{{{
DragonPy$ ./DragonPy_CLI.py --cfg Simple6809Cfg --verbosity=5
}}}

Start Dragon 32 (with many debug output):
{{{
DragonPy$ ./DragonPy_CLI.py --cfg Dragon32Cfg --verbosity=5
}}}

== CLI

{{{
optional arguments:
  -h, --help            show this help message and exit
  --verbosity {5,7,0,10,20,30,40,50}
                        verbosity level to stdout (lower == more output!)
                        (default: 20)
  --logfile {5,7,0,10,20,30,40,50}
                        verbosity level to log file (lower == more output!)
                        (default: 10)
  --log_formatter LOG_FORMATTER
                        see: http://docs.python.org/2/library/logging.html
                        #logrecord-attributes
  --cfg {Simple6809Cfg,Dragon32Cfg}
                        Used configuration
  --bus_socket_host BUS_SOCKET_HOST
                        Host internal socket bus I/O (do not set manually!)
  --bus_socket_port BUS_SOCKET_PORT
                        Port for internal socket bus I/O (do not set
                        manually!)
  --ram RAM             RAM file to load (default none)
  --rom ROM             ROM file to use (default d32.rom)
  --max MAX             If given: Stop CPU after given cycles else: run
                        forever
  --area_debug_active AREA_DEBUG_ACTIVE
                        Debug in PC area: <level>:<start>-<end> - e.g.:
                        --area_debug_active=10:db79-ffff
}}}


== current status

sbc09 works quite well almost:
{{http://www.jensdiemer.de/media/jensdiemer.de/screenshots/DragonPy_sbc09_01.png}}

The Simple6809 config works a little bit. First GUI used a simple Tkinter windows.
Looks like this:
{{http://www.pylucid.org/media/jensdiemer.de/screenshots/Simple6809_TK_03.PNG}}

Current running output:
{{{
6809 EXTENDED BASIC
(C) 1982 BY MICROSOFT

OK
PRINT "DOES NOT WORK"


BREAK
OK
PRINT 123


BREAK
OK
10 PRINT 123
LIST
OK
RUN

BREAK
OK
FOR I=1 to 3:PRINT I:NEXT I
?SN ERROR
OK
}}}

=== performance

The current implementation is not optimised.

With CPython there is round about 235.000 CPU cycles/sec.
With PyPy (sbc09 with Text output) round about 1.370.000 CPU cycles/sec.

A real 6809 machine runs with round about 894.000 CPU cycles/sec. (14.31818 MHz crystal / 16)

== Links

Some links:

 * http://www.burgins.com/m6809.html
 * http://www.maddes.net/m6809pm/ - Programming Manual for the 6809 microprocessor from Motorola Inc. (now Freescale)
 * http://www.6809.org.uk/dragon/hardware.shtml
 * http://dragondata.worldofdragon.org/Publications/inside-dragon.htm
 * http://koti.mbnet.fi/~atjs/mc6809/ - 6809 Emulation Page

Source codes:
 * http://mamedev.org/source/src/mess/drivers/dragon.c.html
 * http://mamedev.org/source/src/mess/machine/dragon.c.html
 * http://mamedev.org/source/src/emu/cpu/m6809/m6809.c.html
 * https://github.com/kjetilhoem/hatchling-32/blob/master/hatchling-32/src/no/k/m6809/InstructionSet.scala

Dragon 32 resources:

 * Forum: http://archive.worldofdragon.org/phpBB3/index.php
 * Wiki: http://archive.worldofdragon.org/index.php?title=Main_Page


== Credits

Based on:

ApplePy - an Apple ][ emulator in Python by James Tauber:

 * https://github.com/jtauber/applepy

ApplyPy is free software, licensed under MIT License.


Some code based on "Xroar" by Ciaran Anscomb:

 * http://www.6809.org.uk/dragon/xroar.shtml

XRoar is free software, licensed under GNU GPL v2 or above



== Links:

| Forum               | [[http://forum.pylucid.org/]]
| IRC                 | [[http://www.pylucid.org/permalink/304/irc-channel|#pylucid on freenode.net]]
| Jabber              | [[xmpp://pylucid@conference.jabber.org|pylucid@conference.jabber.org]]
| Github              | [[https://github.com/jedie/DragonPy]]