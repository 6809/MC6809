=== Dragon 32 emulator in Python

A Open source (GPL v3 or later) emulator for the 30years old homecomputer {{{Dragon 32}}}...

{{http://www.jensdiemer.de/static/jensdiemer.de/screenshots/20140805_DragonPy_Dragon64_01.png|Dragon 64 screenshot}}

A usable Dragon / CoCo emulator is [[http://www.6809.org.uk/dragon/xroar.shtml|XRoar]].

DragonPy will not be a second XRoar written in Python.
This project is primarily to lean and understand.

Current state:
The Dragon 32 / 64 ROM works in Text mode.
Also the "single board computer" ROMs sbc09, Simple6809 and Multicomp6809 works well.

Future goals are:
* Implement a integrated development environment for BASIC programs


=== ROMs

The Dragon ROMs can be downloaded here:
* http://archive.worldofdragon.org/archive/index.php?dir=Roms/Dragon/

There is a simple shell script to automatic download and extract the Dragon ROMs:
{{{
...path/to/DragonPy$ ./download_ROMs.sh
}}}

=== Quick start:

{{{
...path/to/DragonPy$ python2 console_6809_test.py
}}}
or better, using [[http://pypy.org|PyPy]]:
{{{
...path/to/DragonPy$ pypy console_6809_test.py
}}}
It's the Simple6809 BASIC ROM running on console.

== example

Start sbc09:
{{{
...path/to/DragonPy$ ./DragonPy_CLI.py --cfg sbc09 --display_cycle
}}}

Start Simple6809 (with many debug output):
{{{
...path/to/DragonPy$ ./DragonPy_CLI.py --cfg Simple6809 --verbosity=5
}}}

Start Dragon 32 (with some debug output):
{{{
...path/to/DragonPy$ ./DragonPy_CLI.py --cfg Dragon32 --verbosity=30
}}}

If the CPU runs, it starts a http server.
Just request http://localhost:6809 from your browser.
(The Web-Page must be enhanced ;)

== unittests ==

[[https://travis-ci.org/jedie/DragonPy|Travis CI Status]]: {{https://secure.travis-ci.org/jedie/DragonPy.svg?branch=master|DragonPy build status on travis-ci.org}}
* https://travis-ci.org/jedie/DragonPy

{# [[https://coveralls.io/r/jedie/DragonPy|Coveralls Status]]: {{https://img.shields.io/coveralls/jedie/DragonPy.svg|DragonPy status on coveralls.io}} #}
{# * https://coveralls.io/r/jedie/DragonPy #}

=== run unittests ===

You should use PyPy to run all tests. It's around 10 time faster.

{{{
...path/to/DragonPy$ pypy -m unittest discover
}}}
or:
{{{
...path/to/DragonPy$ pypy setup.py test
}}}

Use normal Python:

{{{
...path/to/DragonPy$ python2 -m unittest discover
}}}
or:
{{{
...path/to/DragonPy$ python2 setup.py test
}}}


=== create coverage report ===

install [[https://pypi.python.org/pypi/coverage|coverage]] for python 2:
{{{
~$ sudo pip2 install coverage
}}}

{{{
...path/to/DragonPy$ coverage2 run --source=dragonpy setup.py test
...path/to/DragonPy$ coverage2 coverage2 html
# e.g.:
...path/to/DragonPy$ firefox htmlcov/index.html
}}}

== CLI

{{{
...path/to/DragonPy$ ./DragonPy_CLI.py --help
}}}


== screenshots

Dragon 32 and 64 ROMs in Text mode:

{{http://www.jensdiemer.de/static/jensdiemer.de/screenshots/20140805_DragonPy_Dragon64_01.png}}


"sbc09" ROM in Tkinter window:

{{http://www.jensdiemer.de/static/jensdiemer.de/screenshots/DragonPy_sbc09_01.png}}


"Simple6809" ROM in Tkinter window:

{{http://www.jensdiemer.de/static/jensdiemer.de/screenshots/Simple6809_TK_04.PNG}}


=== Dragon Keyboard

The keyboard mapping is stored into [[https://github.com/jedie/DragonPy/blob/master/dragonpy/Dragon32/keyboard_map.py|dragonpy/Dragon32/keyboard_map.py]].

Some notes:
* "CLEAR" is mapped to "Home" / "Pos 1" key
* "BREAK" is mapped to "Escape" button
* "LEFT" is mapped to left cursor key and to normal backspace, too.

A "auto shift" mode is implemented. So normal lowercase letters would be automaticly converted to uppercase letters.

==== paste clipboard

It is possible to paste the content of the clipboard as user input in the machine.
Just copy (Ctrl-C) the follow content:
{{{
10 CLS
20 FOR I = 0 TO 255:
30 POKE 1024+(I*2),I
40 NEXT I
50 I$ = INKEY$:IF I$="" THEN 50
}}}
Focus the DragonPy window and use Ctrl-V to paste the content.

Looks like:
{{http://www.jensdiemer.de/static/jensdiemer.de/screenshots/20140805_DragonPy_Dragon32_Listing.png}}

Then just **RUN** and then it looks like this:

{{http://www.jensdiemer.de/static/jensdiemer.de/screenshots/20140805_DragonPy_Dragon32_CharMap.png}}

=== performance

The current implementation is not really optimized.

With CPython there is round about 490.000 CPU cycles/sec. in console version.
This is half as fast as the real Hardware.

With PyPy round about 6.900.000 - 8.000.000 CPU cycles/sec.
In other words with PyPy it's ~8 times faster as the real Hardware.

e.g. The Dragon 32 6809 machine with a 14.31818 MHz crystal runs with:
0,895MHz (14,31818Mhz/16=0,895MHz) in other words: 895.000 CPU-cycles/sec.


== TODO:

# Fast save/load BASIC programm listings direct into RAM
# Support CoCo ROMs
# Use bottle for http control server part
# implement more Dragon 32 periphery

unimplemented OPs:

 * RESET
 * RTI
 * SWI / SWI2 / SWI3
 * SYNC


missing 6809 unittests after coverage run:

 * MUL
 * BVS


== Links

 * Grant Searle's Multicomp FPGA project:
 ** Homepage: http://searle.hostei.com/grant/Multicomp/
 ** own [[https://github.com/jedie/DragonPy/tree/master/dragonpy/Multicomp6809#readme|dragonpy/Multicomp6809/README]]
 * Lennart Benschop 6809 Single Board Computer:
 ** Homepage: http://lennartb.home.xs4all.nl/m6809.html
 ** own [[https://github.com/jedie/DragonPy/tree/master/dragonpy/sbc09#readme|dragonpy/sbc09/README]]
 * Grant Searle's Simple 6809 design:
 ** Homepage: http://searle.hostei.com/grant/6809/Simple6809.html
 ** own [[https://github.com/jedie/DragonPy/tree/master/dragonpy/Simple6809#readme|dragonpy/Simple6809/README]]

Some links:

 * http://www.burgins.com/m6809.html
 * http://www.maddes.net/m6809pm/ - Programming Manual for the 6809 microprocessor from Motorola Inc. (now Freescale)
 * http://www.6809.org.uk/dragon/hardware.shtml
 * http://dragondata.worldofdragon.org/Publications/inside-dragon.htm
 * http://koti.mbnet.fi/~atjs/mc6809/ - 6809 Emulation Page

Source codes:
 * https://github.com/naughton/mc6809/blob/master/mc6809.ts
 * https://github.com/maly/6809js/blob/master/6809.js
 * http://mamedev.org/source/src/mess/drivers/dragon.c.html
 * http://mamedev.org/source/src/mess/machine/dragon.c.html
 * http://mamedev.org/source/src/emu/cpu/m6809/m6809.c.html
 * https://github.com/kjetilhoem/hatchling-32/blob/master/hatchling-32/src/no/k/m6809/InstructionSet.scala

Dragon 32 resources:

 * Forum: http://archive.worldofdragon.org/phpBB3/index.php
 * Wiki: http://archive.worldofdragon.org/index.php?title=Main_Page


== Credits

Some code based on:

**ApplePy**

An Apple ][ emulator in Python
 * Author: James Tauber
 * https://github.com/jtauber/applepy
 * License: MIT 


**XRoar**
A really cool Dragon / CoCo emulator
 * Author: Ciaran Anscomb
 * http://www.6809.org.uk/xroar/
 * License: GNU GPL v2

=== included Python modules:

**python-pager**
Page output and find dimensions of console.
 * Author: Anatoly Techtonik
 * License: Public Domain
 * Homepage: https://bitbucket.org/techtonik/python-pager/
 * Stored here: [[https://github.com/jedie/DragonPy/blob/master/dragonpy/utils/pager.py|/dragonpy/utils/pager.py]]

**srecutils.py**
Motorola S-Record utilities
 * Author: Gabriel Tremblay
 * License: GNU GPL v2 
 * Homepage: https://github.com/gabtremblay/pysrec
 * Stored here: [[https://github.com/jedie/DragonPy/blob/master/dragonpy/utils/srecord_utils.py|/dragonpy/utils/srecord_utils.py]]


== Links:

| Forum               | [[http://forum.pylucid.org/]]
| IRC                 | [[http://www.pylucid.org/permalink/304/irc-channel|#pylucid on freenode.net]]
| Jabber              | [[xmpp://pylucid@conference.jabber.org|pylucid@conference.jabber.org]]
| Github              | [[https://github.com/jedie/DragonPy]]
