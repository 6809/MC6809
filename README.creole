=== Dragon 32 emulator in Python

A Open source (GPL v3 or later) emulator for the 30years old homecomputer {{{Dragon 32}}}...

It's in a early development state and not usable, yet.
A usable Dragon / CoCo emulator is [[http://www.6809.org.uk/dragon/xroar.shtml|XRoar]].

DragonPy will not be a second XRoar written in Python.
This project is primarily to lean and understand.

Currently you can run "single board computer" ROMs like: sbc09, Simple6809 and Multicomp6809.

Future goals are:
* run Dragon 32 ROMs (maybe in far future: Dragon 64)
* Implement a integrated development environment for BASIC programs

The Dragon ROMs can be downloaded here:
* http://archive.worldofdragon.org/archive/index.php?dir=Roms/Dragon/

I used {{{Dragon Data Ltd - Dragon 32 - IC17.zip}}} extract the ROM file
and save it as {{{d32.rom}}} in {{{./Dragon32/}}}


== example

Start sbc09:
{{{
DragonPy$ ./DragonPy_CLI.py --cfg sbc09 --display_cycle
}}}

Start Simple6809 (with many debug output):
{{{
DragonPy$ ./DragonPy_CLI.py --cfg Simple6809 --verbosity=5
}}}

Start Dragon 32 (with some debug output):
{{{
DragonPy$ ./DragonPy_CLI.py --cfg Dragon32 --verbosity=30
}}}

If the CPU runs, it starts a http server.
Just request http://localhost:6809 from your browser.
(The Web-Page must be enhanced ;)

== unittests ==

[[https://travis-ci.org/jedie/DragonPy|Travis CI Status]]: {{https://secure.travis-ci.org/jedie/DragonPy.svg?branch=master|DragonPy build status on travis-ci.org}}
* https://travis-ci.org/jedie/DragonPy

{# [[https://coveralls.io/r/jedie/DragonPy|Coveralls Status]]: {{https://img.shields.io/coveralls/jedie/DragonPy.svg|DragonPy status on coveralls.io}} #}
{# * https://coveralls.io/r/jedie/DragonPy #}

=== run unittests ===

You should use PyPy to run all tests. It's around 10 time faster.

{{{
.../path/to/DragonPy$ pypy -m unittest discover
}}}
or:
{{{
.../path/to/DragonPy$ pypy setup.py test
}}}

Use normal Python:

{{{
.../path/to/DragonPy$ python2 -m unittest discover
}}}
or:
{{{
.../path/to/DragonPy$ python2 setup.py test
}}}


=== create coverage report ===

install [[https://pypi.python.org/pypi/coverage|coverage]] for python 2:
{{{
~$ sudo pip2 install coverage
}}}

{{{
.../path/to/DragonPy$ coverage2 run --source=dragonpy setup.py test
.../path/to/DragonPy$ coverage2 coverage2 html
# e.g.:
.../path/to/DragonPy$ firefox htmlcov/index.html
}}}

== CLI

{{{
DragonPy - Dragon 32 emulator in Python None
-------------------------------------------------------------------------------

usage: DragonPy_CLI.py [-h] [--verbosity {5,7,0,10,20,30,40,50}]
                       [--logfile {5,7,0,10,20,30,40,50}]
                       [--log_formatter LOG_FORMATTER]
                       [--cfg {Dragon32,sbc09,Simple6809}] [--display_cycle]
                       [--bus_socket_host BUS_SOCKET_HOST]
                       [--bus_socket_port BUS_SOCKET_PORT] [--ram RAM]
                       [--rom ROM] [--max MAX]
                       [--area_debug_active AREA_DEBUG_ACTIVE]
                       [--area_debug_cycles AREA_DEBUG_CYCLES]

DragonPy - Dragon 32 emulator in Python

optional arguments:
  -h, --help            show this help message and exit
  --verbosity {5,7,0,10,20,30,40,50}
                        verbosity level to stdout (lower == more output!)
                        (default: 20)
  --logfile {5,7,0,10,20,30,40,50}
                        verbosity level to log file (lower == more output!)
                        (default: 10)
  --log_formatter LOG_FORMATTER
                        see: http://docs.python.org/2/library/logging.html
                        #logrecord-attributes
  --cfg {Dragon32,sbc09,Simple6809}
                        Used configuration
  --display_cycle       print CPU cycle/sec while running.
  --compare_trace {0,1,2,3}
                        Compare with XRoar/v09 trace file? (see README)
  --bus_socket_host BUS_SOCKET_HOST
                        Host internal socket bus I/O (do not set manually!)
  --bus_socket_port BUS_SOCKET_PORT
                        Port for internal socket bus I/O (do not set
                        manually!)
  --ram RAM             RAM file to load (default none)
  --rom ROM             ROM file to use (default d32.rom)
  --max MAX             If given: Stop CPU after given cycles else: run
                        forever
  --area_debug_active AREA_DEBUG_ACTIVE
                        Debug in PC area: <level>:<start>-<end> - e.g.:
                        --area_debug_active=10:db79-ffff
  --area_debug_cycles AREA_DEBUG_CYCLES
                        activate debug after CPU cycles
}}}

==== compare trace

For developing we add a way to compare the CPU running with a trace file
from XRoar or v09.

For this we add the command line option **--compare_trace**
Set it to:

| **--compare_trace=1** | compare and info if differed
| **--compare_trace=2** | exit if program counter is differed
| **--compare_trace=3** | exit if program counter or CC flags are differed
| **--compare_trace=4** | exit if program counter or CC flags or accu A/B are differed
| **--compare_trace=5** | exit if program counter or CC flags or A,B,X,Y,U or S are differed

A XRoar trace file must be stored at **~/xroar_trace.txt**
The v09 trace file here: **~/v09_trace.txt**

== current status

sbc09, Simple6809 and Multicomp6809 seems to work:
{{http://www.jensdiemer.de/static/jensdiemer.de/screenshots/DragonPy_sbc09_01.png}}

First GUI used a simple Tkinter windows.
Looks like this (outdated):
{{http://www.jensdiemer.de/static/jensdiemer.de/screenshots/Simple6809_TK_03.PNG}}

Current running output:
{{{
6809 EXTENDED BASIC
(C) 1982 BY MICROSOFT

OK
PRINT "HELLO WORLD!"
HELLO WORLD!
OK

10 FOR I=1 TO 3
20 PRINT STR$(I)+" DRAGONPY"
30 NEXT I
RUN
1 DRAGONPY
2 DRAGONPY
3 DRAGONPY
OK

LIST
10 FOR I=1 TO 3
20 PRINT STR$(I)+" DRAGONPY"
30 NEXT I
OK
}}}

=== performance

The current implementation is not optimized.

With CPython there is round about 235.000 CPU cycles/sec.

With PyPy (sbc09 with Text output) round about 1.370.000 CPU cycles/sec.
In other words with PyPy a 1,37MHz CPU is emulated. 

e.g. The Dragon 32 6809 machine with a 14.31818 MHz crystal runs with:
0,895MHz (14,31818Mhz/16=0,895MHz) in other words: 895.000 CPU-cycles/sec.

=== about implementation

The current implementation 

# CLI starts CPU via subprocess
# CPU starts a control http server at localhost:6809
# in the config some memory areas are "marked" as "bus areas"
# If CPU read/write in a bus memory area:
## send/receive via socked from the periphery
## periphery send/receive to components like the screen/SAM/PIA/cassette etc.

It looks like this:
{{{
+----------+               +----------+              +--------------------+
| CLI      |  start via    | 6809 CPU |  start in    | CPU control server |
|----------|-------------->|----------|+------------>|--------------------|
|          |  subprocess   |          | same process |                    |
|          |               |          |              |    http server     |
|periphery |               |          |              |                    |
|-Screen   |bus communicate|bus Memory|<-------------|   localhost:6809   |
|-SAM/PIA  |<------------->|   area   |              |                    |
|-cassette |   via socket  |          |              |                    |
+----------+               +----------+              +--------------------+
}}}

== TODO:

# implement Dragon 32 periphery
# use Python multiprocessing module

missing unittests after coverage run:
 
 * ea relative byte
 * ea relative word
 * DAA
 * MUL
 * SEX
 * BRN
 * BVC
 * BVS
 * LSR memory
 * ROR memory


== Links

 * Grant Searle's Multicomp FPGA project:
 ** Homepage: http://searle.hostei.com/grant/Multicomp/
 ** own [[https://github.com/jedie/DragonPy/tree/master/dragonpy/Multicomp6809#readme|dragonpy/Multicomp6809/README]]
 * Lennart Benschop 6809 Single Board Computer:
 ** Homepage: http://lennartb.home.xs4all.nl/m6809.html
 ** own [[https://github.com/jedie/DragonPy/tree/master/dragonpy/sbc09#readme|dragonpy/sbc09/README]]
 * Grant Searle's Simple 6809 design:
 ** Homepage: http://searle.hostei.com/grant/6809/Simple6809.html
 ** own [[https://github.com/jedie/DragonPy/tree/master/dragonpy/Simple6809#readme|dragonpy/Simple6809/README]]

Some links:

 * http://www.burgins.com/m6809.html
 * http://www.maddes.net/m6809pm/ - Programming Manual for the 6809 microprocessor from Motorola Inc. (now Freescale)
 * http://www.6809.org.uk/dragon/hardware.shtml
 * http://dragondata.worldofdragon.org/Publications/inside-dragon.htm
 * http://koti.mbnet.fi/~atjs/mc6809/ - 6809 Emulation Page

Source codes:
 * https://github.com/naughton/mc6809/blob/master/mc6809.ts
 * https://github.com/maly/6809js/blob/master/6809.js
 * http://mamedev.org/source/src/mess/drivers/dragon.c.html
 * http://mamedev.org/source/src/mess/machine/dragon.c.html
 * http://mamedev.org/source/src/emu/cpu/m6809/m6809.c.html
 * https://github.com/kjetilhoem/hatchling-32/blob/master/hatchling-32/src/no/k/m6809/InstructionSet.scala

Dragon 32 resources:

 * Forum: http://archive.worldofdragon.org/phpBB3/index.php
 * Wiki: http://archive.worldofdragon.org/index.php?title=Main_Page


== Credits

Based on:

ApplePy - an Apple ][ emulator in Python by James Tauber:

 * https://github.com/jtauber/applepy

ApplyPy is free software, licensed under MIT License.


Some code based on "Xroar" by Ciaran Anscomb:

 * http://www.6809.org.uk/dragon/xroar.shtml

XRoar is free software, licensed under GNU GPL v2 or above



== Links:

| Forum               | [[http://forum.pylucid.org/]]
| IRC                 | [[http://www.pylucid.org/permalink/304/irc-channel|#pylucid on freenode.net]]
| Jabber              | [[xmpp://pylucid@conference.jabber.org|pylucid@conference.jabber.org]]
| Github              | [[https://github.com/jedie/DragonPy]]
