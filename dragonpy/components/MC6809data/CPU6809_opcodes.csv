addr_mode	bytes	category	cycles	desc	instr_info_key	instruction	mem_access	mem_read	mem_write	mnemonic	opcode	opcode_hex	HNZVC	instr_desc
DIRECT	2	0	6	M = !M + 1	NEG	NEG	byte	True	True	NEG	0	0x0	uaaaa	Negate accumulator or memory
DIRECT	2	0	6	M = complement(M)	COM	COM	byte	True	True	COM	3	0x3	-aa01	Complement accumulator or memory location
DIRECT	2	0	6	M = Logical shift M right	LSR	LSR	byte	True	True	LSR	4	0x4	-0a-s	Logical shift right accumulator or memory location
DIRECT	2	0	6	M = Rotate M Right thru carry	ROR	ROR	byte	True	True	ROR	6	0x6	-aa-s	Rotate accumulator or memory right
DIRECT	2	0	6	M = Arithmetic shift M right	ASR	ASR	byte	True	True	ASR	7	0x7	uaa-s	Arithmetic shift of accumulator or memory right
DIRECT	2	0	6	M = Logical shift M left	LSL	LSL	byte	True	True	LSL/ASL	8	0x8	naaas	Logical shift left accumulator or memory location
DIRECT	2	0	6	M = Rotate M left thru carry	ROL	ROL	byte	True	True	ROL	9	0x9	-aaas	Rotate accumulator or memory left
DIRECT	2	0	6	M = M  1	DEC	DEC	byte	True	True	DEC	10	0xa	-aaa-	Decrement accumulator or memory location
DIRECT	2	0	6	M = M + 1	INC	INC	byte	True	True	INC	12	0xc	-aaa-	Increment accumulator or memory location
DIRECT	2	0	6	Test M	TST	TST	byte	True	False	TST	13	0xd	-aa0-	Test accumulator or memory location
DIRECT	2	0	6	M = 0	CLR	CLR	byte	False	True	CLR	15	0xf	-0100	Clear accumulator or memory location
INHERENT	1	0	2	Decimal Adjust A	DAA	DAA	-	False	False	DAA	25	0x19	-aa0a	Decimal adjust A accumulator
IMMEDIATE	2	0	8	exchange R1,R2	EXG	EXG	byte	True	False	EXG	30	0x1e	ccccc	Exchange Rl with R2
IMMEDIATE	2	0	7	Transfer R1 to R2	TFR	TFR	byte	True	False	TFR	31	0x1f	ccccc	Transfer R1 to R2
INHERENT	1	0	11	D = A*B (Unsigned)	MUL	MUL	-	False	False	MUL	61	0x3d	--a-a	Unsigned multiply (A * B ? D)
INHERENT	1	0	2	A = !A + 1	NEG	NEG	-	False	False	NEGA	64	0x40	uaaaa	Negate accumulator or memory
INHERENT	1	0	2	A = complement(A)	COM	COM	-	False	False	COMA	67	0x43	-aa01	Complement accumulator or memory location
INHERENT	1	0	2	A = Logical shift A right	LSR	LSR	-	False	False	LSRA	68	0x44	-0a-s	Logical shift right accumulator or memory location
INHERENT	1	0	2	A = Rotate A Right thru carry	ROR	ROR	-	False	False	RORA	70	0x46	-aa-s	Rotate accumulator or memory right
INHERENT	1	0	2	A = Arithmetic shift A right	ASR	ASR	-	False	False	ASRA	71	0x47	uaa-s	Arithmetic shift of accumulator or memory right
INHERENT	1	0	2	A = Logical shift A left	LSL	LSL	-	False	False	LSLA/ASLA	72	0x48	naaas	Logical shift left accumulator or memory location
INHERENT	1	0	2	A = Rotate A left thru carry	ROL	ROL	-	False	False	ROLA	73	0x49	-aaas	Rotate accumulator or memory left
INHERENT	1	0	2	A = A  1	DEC	DEC	-	False	False	DECA	74	0x4a	-aaa-	Decrement accumulator or memory location
INHERENT	1	0	2	A = A + 1	INC	INC	-	False	False	INCA	76	0x4c	-aaa-	Increment accumulator or memory location
INHERENT	1	0	2	Test A	TST	TST	-	False	False	TSTA	77	0x4d	-aa0-	Test accumulator or memory location
INHERENT	1	0	2	A = 0	CLR	CLR	-	False	False	CLRA	79	0x4f	-0100	Clear accumulator or memory location
INHERENT	1	0	2	B = !B + 1	NEG	NEG	-	False	False	NEGB	80	0x50	uaaaa	Negate accumulator or memory
INHERENT	1	0	2	B = complement(B)	COM	COM	-	False	False	COMB	83	0x53	-aa01	Complement accumulator or memory location
INHERENT	1	0	2	B = Logical shift B right	LSR	LSR	-	False	False	LSRB	84	0x54	-0a-s	Logical shift right accumulator or memory location
INHERENT	1	0	2	B = Rotate B Right thru carry	ROR	ROR	-	False	False	RORB	86	0x56	-aa-s	Rotate accumulator or memory right
INHERENT	1	0	2	B = Arithmetic shift B right	ASR	ASR	-	False	False	ASRB	87	0x57	uaa-s	Arithmetic shift of accumulator or memory right
INHERENT	1	0	2	B = Logical shift B left	LSL	LSL	-	False	False	LSLB/ASLB	88	0x58	naaas	Logical shift left accumulator or memory location
INHERENT	1	0	2	B = Rotate B left thru carry	ROL	ROL	-	False	False	ROLB	89	0x59	-aaas	Rotate accumulator or memory left
INHERENT	1	0	2	B = B  1	DEC	DEC	-	False	False	DECB	90	0x5a	-aaa-	Decrement accumulator or memory location
INHERENT	1	0	2	B = B + 1	INC	INC	-	False	False	INCB	92	0x5c	-aaa-	Increment accumulator or memory location
INHERENT	1	0	2	Test B	TST	TST	-	False	False	TSTB	93	0x5d	-aa0-	Test accumulator or memory location
INHERENT	1	0	2	B = 0	CLR	CLR	-	False	False	CLRB	95	0x5f	-0100	Clear accumulator or memory location
INDEXED	2	0	6	M = !M + 1	NEG	NEG	byte	True	True	NEG	96	0x60	uaaaa	Negate accumulator or memory
INDEXED	2	0	6	M = complement(M)	COM	COM	byte	True	True	COM	99	0x63	-aa01	Complement accumulator or memory location
INDEXED	2	0	6	M = Logical shift M right	LSR	LSR	byte	True	True	LSR	100	0x64	-0a-s	Logical shift right accumulator or memory location
INDEXED	2	0	6	M = Rotate M Right thru carry	ROR	ROR	byte	True	True	ROR	102	0x66	-aa-s	Rotate accumulator or memory right
INDEXED	2	0	6	M = Arithmetic shift M right	ASR	ASR	byte	True	True	ASR	103	0x67	uaa-s	Arithmetic shift of accumulator or memory right
INDEXED	2	0	6	M = Logical shift M left	LSL	LSL	byte	True	True	LSL/ASL	104	0x68	naaas	Logical shift left accumulator or memory location
INDEXED	2	0	6	M = Rotate M left thru carry	ROL	ROL	byte	True	True	ROL	105	0x69	-aaas	Rotate accumulator or memory left
INDEXED	2	0	6	M = M  1	DEC	DEC	byte	True	True	DEC	106	0x6a	-aaa-	Decrement accumulator or memory location
INDEXED	2	0	6	M = M + 1	INC	INC	byte	True	True	INC	108	0x6c	-aaa-	Increment accumulator or memory location
INDEXED	2	0	6	Test M	TST	TST	byte	True	False	TST	109	0x6d	-aa0-	Test accumulator or memory location
INDEXED	2	0	6	M = 0	CLR	CLR	byte	False	True	CLR	111	0x6f	-0100	Clear accumulator or memory location
EXTENDED	3	0	7	M = !M + 1	NEG	NEG	byte	True	True	NEG	112	0x70	uaaaa	Negate accumulator or memory
EXTENDED	3	0	7	M = complement(M)	COM	COM	byte	True	True	COM	115	0x73	-aa01	Complement accumulator or memory location
EXTENDED	3	0	7	M = Logical shift M right	LSR	LSR	byte	True	True	LSR	116	0x74	-0a-s	Logical shift right accumulator or memory location
EXTENDED	3	0	7	M = Rotate M Right thru carry	ROR	ROR	byte	True	True	ROR	118	0x76	-aa-s	Rotate accumulator or memory right
EXTENDED	3	0	7	M = Arithmetic shift M right	ASR	ASR	byte	True	True	ASR	119	0x77	uaa-s	Arithmetic shift of accumulator or memory right
EXTENDED	3	0	7	M = Logical shift M left	LSL	LSL	byte	True	True	LSL/ASL	120	0x78	naaas	Logical shift left accumulator or memory location
EXTENDED	3	0	7	M = Rotate M left thru carry	ROL	ROL	byte	True	True	ROL	121	0x79	-aaas	Rotate accumulator or memory left
EXTENDED	3	0	7	M = M  1	DEC	DEC	byte	True	True	DEC	122	0x7a	-aaa-	Decrement accumulator or memory location
EXTENDED	3	0	7	M = M + 1	INC	INC	byte	True	True	INC	124	0x7c	-aaa-	Increment accumulator or memory location
EXTENDED	3	0	7	Test M	TST	TST	byte	True	False	TST	125	0x7d	-aa0-	Test accumulator or memory location
EXTENDED	3	0	7	M = 0	CLR	CLR	byte	False	True	CLR	127	0x7f	-0100	Clear accumulator or memory location
IMMEDIATE	2	0	2	A = A - M	SUB8	SUB	byte	True	False	SUBA	128	0x80	uaaaa	Subtract memory from accumulator
IMMEDIATE	2	0	2	Compare M from A	CMP8	CMP	byte	True	False	CMPA	129	0x81	uaaaa	Compare memory from accumulator
IMMEDIATE	2	0	2	A = A - M - C	SBC	SBC	byte	True	False	SBCA	130	0x82	uaaaa	Subtract memory from accumulator with borrow
IMMEDIATE	2	0	2	A = A && M	AND	AND	byte	True	False	ANDA	132	0x84	-aa0-	AND memory with accumulator
IMMEDIATE	2	0	2	Bit Test A (M&&A)	BIT	BIT	byte	True	False	BITA	133	0x85	-aa0-	Bit test memory with accumulator
IMMEDIATE	2	0	2	A = M	LD8	LD	byte	True	False	LDA	134	0x86	-aa0-	Load accumulator from memory
IMMEDIATE	2	0	2	A = A XOR M	EOR	EOR	byte	True	False	EORA	136	0x88	-aa0-	Exclusive OR memory with accumulator
IMMEDIATE	2	0	2	A = A+M+C	ADC	ADC	byte	True	False	ADCA	137	0x89	aaaaa	Add memory to accumulator with carry
IMMEDIATE	2	0	2	|A = A |||| M|	OR	OR	byte	True	False	ORA	138	0x8a	-aa0-	OR memory with accumulator
IMMEDIATE	2	0	2	A = A+M	ADD8	ADD	byte	True	False	ADDA	139	0x8b	aaaaa	Add memory to accumulator
DIRECT	2	0	4	A = A - M	SUB8	SUB	byte	True	False	SUBA	144	0x90	uaaaa	Subtract memory from accumulator
DIRECT	2	0	4	Compare M from A	CMP8	CMP	byte	True	False	CMPA	145	0x91	uaaaa	Compare memory from accumulator
DIRECT	2	0	4	A = A - M - C	SBC	SBC	byte	True	False	SBCA	146	0x92	uaaaa	Subtract memory from accumulator with borrow
DIRECT	2	0	4	A = A && M	AND	AND	byte	True	False	ANDA	148	0x94	-aa0-	AND memory with accumulator
DIRECT	2	0	4	Bit Test A (M&&A)	BIT	BIT	byte	True	False	BITA	149	0x95	-aa0-	Bit test memory with accumulator
DIRECT	2	0	4	A = M	LD8	LD	byte	True	False	LDA	150	0x96	-aa0-	Load accumulator from memory
DIRECT	2	0	4	M = A	ST8	ST	byte	False	True	STA	151	0x97	-aa0-	Store accumulator to memroy
DIRECT	2	0	4	A = A XOR M	EOR	EOR	byte	True	False	EORA	152	0x98	-aa0-	Exclusive OR memory with accumulator
DIRECT	2	0	4	A = A+M+C	ADC	ADC	byte	True	False	ADCA	153	0x99	aaaaa	Add memory to accumulator with carry
DIRECT	2	0	4	|A = A |||| M|	OR	OR	byte	True	False	ORA	154	0x9a	-aa0-	OR memory with accumulator
DIRECT	2	0	4	A = A+M	ADD8	ADD	byte	True	False	ADDA	155	0x9b	aaaaa	Add memory to accumulator
INDEXED	2	0	4	A = A - M	SUB8	SUB	byte	True	False	SUBA	160	0xa0	uaaaa	Subtract memory from accumulator
INDEXED	2	0	4	Compare M from A	CMP8	CMP	byte	True	False	CMPA	161	0xa1	uaaaa	Compare memory from accumulator
INDEXED	2	0	4	A = A - M - C	SBC	SBC	byte	True	False	SBCA	162	0xa2	uaaaa	Subtract memory from accumulator with borrow
INDEXED	2	0	4	A = A && M	AND	AND	byte	True	False	ANDA	164	0xa4	-aa0-	AND memory with accumulator
INDEXED	2	0	4	Bit Test A (M&&A)	BIT	BIT	byte	True	False	BITA	165	0xa5	-aa0-	Bit test memory with accumulator
INDEXED	2	0	4	A = M	LD8	LD	byte	True	False	LDA	166	0xa6	-aa0-	Load accumulator from memory
INDEXED	2	0	4	M = A	ST8	ST	byte	False	True	STA	167	0xa7	-aa0-	Store accumulator to memroy
INDEXED	2	0	4	A = A XOR M	EOR	EOR	byte	True	False	EORA	168	0xa8	-aa0-	Exclusive OR memory with accumulator
INDEXED	2	0	4	A = A+M+C	ADC	ADC	byte	True	False	ADCA	169	0xa9	aaaaa	Add memory to accumulator with carry
INDEXED	2	0	4	|A = A |||| M|	OR	OR	byte	True	False	ORA	170	0xaa	-aa0-	OR memory with accumulator
INDEXED	2	0	4	A = A+M	ADD8	ADD	byte	True	False	ADDA	171	0xab	aaaaa	Add memory to accumulator
EXTENDED	3	0	5	A = A - M	SUB8	SUB	byte	True	False	SUBA	176	0xb0	uaaaa	Subtract memory from accumulator
EXTENDED	3	0	5	Compare M from A	CMP8	CMP	byte	True	False	CMPA	177	0xb1	uaaaa	Compare memory from accumulator
EXTENDED	3	0	5	A = A - M - C	SBC	SBC	byte	True	False	SBCA	178	0xb2	uaaaa	Subtract memory from accumulator with borrow
EXTENDED	3	0	5	A = A && M	AND	AND	byte	True	False	ANDA	180	0xb4	-aa0-	AND memory with accumulator
EXTENDED	3	0	5	Bit Test A (M&&A)	BIT	BIT	byte	True	False	BITA	181	0xb5	-aa0-	Bit test memory with accumulator
EXTENDED	3	0	5	A = M	LD8	LD	byte	True	False	LDA	182	0xb6	-aa0-	Load accumulator from memory
EXTENDED	3	0	5	M = A	ST8	ST	byte	False	True	STA	183	0xb7	-aa0-	Store accumulator to memroy
EXTENDED	3	0	5	A = A XOR M	EOR	EOR	byte	True	False	EORA	184	0xb8	-aa0-	Exclusive OR memory with accumulator
EXTENDED	3	0	5	A = A+M+C	ADC	ADC	byte	True	False	ADCA	185	0xb9	aaaaa	Add memory to accumulator with carry
EXTENDED	3	0	5	|A = A |||| M|	OR	OR	byte	True	False	ORA	186	0xba	-aa0-	OR memory with accumulator
EXTENDED	3	0	5	A = A+M	ADD8	ADD	byte	True	False	ADDA	187	0xbb	aaaaa	Add memory to accumulator
IMMEDIATE	2	0	2	B = B - M	SUB8	SUB	byte	True	False	SUBB	192	0xc0	uaaaa	Subtract memory from accumulator
IMMEDIATE	2	0	2	Compare M from B	CMP8	CMP	byte	True	False	CMPB	193	0xc1	uaaaa	Compare memory from accumulator
IMMEDIATE	2	0	2	B = B - M - C	SBC	SBC	byte	True	False	SBCB	194	0xc2	uaaaa	Subtract memory from accumulator with borrow
IMMEDIATE	2	0	2	B = B && M	AND	AND	byte	True	False	ANDB	196	0xc4	-aa0-	AND memory with accumulator
IMMEDIATE	2	0	2	Bit Test B (M&&B)	BIT	BIT	byte	True	False	BITB	197	0xc5	-aa0-	Bit test memory with accumulator
IMMEDIATE	2	0	2	B = M	LD8	LD	byte	True	False	LDB	198	0xc6	-aa0-	Load accumulator from memory
IMMEDIATE	2	0	2	B = M XOR B	EOR	EOR	byte	True	False	EORB	200	0xc8	-aa0-	Exclusive OR memory with accumulator
IMMEDIATE	2	0	2	B = B+M+C	ADC	ADC	byte	True	False	ADCB	201	0xc9	aaaaa	Add memory to accumulator with carry
IMMEDIATE	2	0	2	|B = B |||| M|	OR	OR	byte	True	False	ORB	202	0xca	-aa0-	OR memory with accumulator
IMMEDIATE	2	0	2	B = B+M	ADD8	ADD	byte	True	False	ADDB	203	0xcb	aaaaa	Add memory to accumulator
DIRECT	2	0	4	B = B - M	SUB8	SUB	byte	True	False	SUBB	208	0xd0	uaaaa	Subtract memory from accumulator
DIRECT	2	0	4	Compare M from B	CMP8	CMP	byte	True	False	CMPB	209	0xd1	uaaaa	Compare memory from accumulator
DIRECT	2	0	4	B = B - M - C	SBC	SBC	byte	True	False	SBCB	210	0xd2	uaaaa	Subtract memory from accumulator with borrow
DIRECT	2	0	4	B = B && M	AND	AND	byte	True	False	ANDB	212	0xd4	-aa0-	AND memory with accumulator
DIRECT	2	0	4	Bit Test B (M&&B)	BIT	BIT	byte	True	False	BITB	213	0xd5	-aa0-	Bit test memory with accumulator
DIRECT	2	0	4	B = M	LD8	LD	byte	True	False	LDB	214	0xd6	-aa0-	Load accumulator from memory
DIRECT	2	0	4	M = B	ST8	ST	byte	False	True	STB	215	0xd7	-aa0-	Store accumulator to memroy
DIRECT	2	0	4	B = M XOR B	EOR	EOR	byte	True	False	EORB	216	0xd8	-aa0-	Exclusive OR memory with accumulator
DIRECT	2	0	4	B = B+M+C	ADC	ADC	byte	True	False	ADCB	217	0xd9	aaaaa	Add memory to accumulator with carry
DIRECT	2	0	4	|B = B |||| M|	OR	OR	byte	True	False	ORB	218	0xda	-aa0-	OR memory with accumulator
DIRECT	2	0	4	B = B+M	ADD8	ADD	byte	True	False	ADDB	219	0xdb	aaaaa	Add memory to accumulator
INDEXED	2	0	4	B = B - M	SUB8	SUB	byte	True	False	SUBB	224	0xe0	uaaaa	Subtract memory from accumulator
INDEXED	2	0	4	Compare M from B	CMP8	CMP	byte	True	False	CMPB	225	0xe1	uaaaa	Compare memory from accumulator
INDEXED	2	0	4	B = B - M - C	SBC	SBC	byte	True	False	SBCB	226	0xe2	uaaaa	Subtract memory from accumulator with borrow
INDEXED	2	0	4	B = B && M	AND	AND	byte	True	False	ANDB	228	0xe4	-aa0-	AND memory with accumulator
INDEXED	2	0	4	Bit Test B (M&&B)	BIT	BIT	byte	True	False	BITB	229	0xe5	-aa0-	Bit test memory with accumulator
INDEXED	2	0	4	B = M	LD8	LD	byte	True	False	LDB	230	0xe6	-aa0-	Load accumulator from memory
INDEXED	2	0	4	M = B	ST8	ST	byte	False	True	STB	231	0xe7	-aa0-	Store accumulator to memroy
INDEXED	2	0	4	B = M XOR B	EOR	EOR	byte	True	False	EORB	232	0xe8	-aa0-	Exclusive OR memory with accumulator
INDEXED	2	0	4	B = B+M+C	ADC	ADC	byte	True	False	ADCB	233	0xe9	aaaaa	Add memory to accumulator with carry
INDEXED	2	0	4	|B = B |||| M|	OR	OR	byte	True	False	ORB	234	0xea	-aa0-	OR memory with accumulator
INDEXED	2	0	4	B = B+M	ADD8	ADD	byte	True	False	ADDB	235	0xeb	aaaaa	Add memory to accumulator
EXTENDED	3	0	5	B = B - M	SUB8	SUB	byte	True	False	SUBB	240	0xf0	uaaaa	Subtract memory from accumulator
EXTENDED	3	0	5	Compare M from B	CMP8	CMP	byte	True	False	CMPB	241	0xf1	uaaaa	Compare memory from accumulator
EXTENDED	3	0	5	B = B - M - C	SBC	SBC	byte	True	False	SBCB	242	0xf2	uaaaa	Subtract memory from accumulator with borrow
EXTENDED	3	0	5	B = B && M	AND	AND	byte	True	False	ANDB	244	0xf4	-aa0-	AND memory with accumulator
EXTENDED	3	0	5	Bit Test B (M&&B)	BIT	BIT	byte	True	False	BITB	245	0xf5	-aa0-	Bit test memory with accumulator
EXTENDED	3	0	5	B = M	LD8	LD	byte	True	False	LDB	246	0xf6	-aa0-	Load accumulator from memory
EXTENDED	3	0	5	M = B	ST8	ST	byte	False	True	STB	247	0xf7	-aa0-	Store accumulator to memroy
EXTENDED	3	0	5	B = M XOR B	EOR	EOR	byte	True	False	EORB	248	0xf8	-aa0-	Exclusive OR memory with accumulator
EXTENDED	3	0	5	B = B+M+C	ADC	ADC	byte	True	False	ADCB	249	0xf9	aaaaa	Add memory to accumulator with carry
EXTENDED	3	0	5	|B = B |||| M|	OR	OR	byte	True	False	ORB	250	0xfa	-aa0-	OR memory with accumulator
EXTENDED	3	0	5	B = B+M	ADD8	ADD	byte	True	False	ADDB	251	0xfb	aaaaa	Add memory to accumulator
INHERENT	1	1	2	Sign extend B into A	SEX	SEX	-	False	False	SEX	29	0x1d	-aa0-	Sign Extend B accumulator into A accumulator
IMMEDIATE	3	1	4	D = D - M:M+1	SUB16	SUB	word	True	False	SUBD	131	0x83	-aaaa	Subtract memory from D accumulator
DIRECT	2	1	6	D = D - M:M+1	SUB16	SUB	word	True	False	SUBD	147	0x93	-aaaa	Subtract memory from D accumulator
INDEXED	2	1	6	D = D - M:M+1	SUB16	SUB	word	True	False	SUBD	163	0xa3	-aaaa	Subtract memory from D accumulator
EXTENDED	3	1	7	D = D - M:M+1	SUB16	SUB	word	True	False	SUBD	179	0xb3	-aaaa	Subtract memory from D accumulator
IMMEDIATE	3	1	4	D = D+M:M+1	ADD16	ADD	word	True	False	ADDD	195	0xc3	-aaaa	Add memory to D accumulator
IMMEDIATE	3	1	3	D = M:M+1	LD16	LD	word	True	False	LDD	204	0xcc	-aa0-	Load stack pointer from memory
DIRECT	2	1	6	D = D+M:M+1	ADD16	ADD	word	True	False	ADDD	211	0xd3	-aaaa	Add memory to D accumulator
DIRECT	2	1	5	D = M:M+1	LD16	LD	word	True	False	LDD	220	0xdc	-aa0-	Load stack pointer from memory
DIRECT	2	1	5	M:M+1 = D	ST16	ST	word	False	True	STD	221	0xdd	-aa0-	Store stack pointer to memory
INDEXED	2	1	6	D = D+M:M+1	ADD16	ADD	word	True	False	ADDD	227	0xe3	-aaaa	Add memory to D accumulator
INDEXED	2	1	5	D = M:M+1	LD16	LD	word	True	False	LDD	236	0xec	-aa0-	Load stack pointer from memory
INDEXED	2	1	5	M:M+1 = D	ST16	ST	word	False	True	STD	237	0xed	-aa0-	Store stack pointer to memory
EXTENDED	3	1	7	D = D+M:M+1	ADD16	ADD	word	True	False	ADDD	243	0xf3	-aaaa	Add memory to D accumulator
EXTENDED	3	1	6	D = M:M+1	LD16	LD	word	True	False	LDD	252	0xfc	-aa0-	Load stack pointer from memory
EXTENDED	3	1	6	M:M+1 = D	ST16	ST	word	False	True	STD	253	0xfd	-aa0-	Store stack pointer to memory
IMMEDIATE	4	1	5	Compare M:M+1 from D	CMP16	CMP	word	True	False	CMPD	4227	0x1083	-aaaa	Compare memory from stack pointer
DIRECT	3	1	7	Compare M:M+1 from D	CMP16	CMP	word	True	False	CMPD	4243	0x1093	-aaaa	Compare memory from stack pointer
INDEXED	3	1	7	Compare M:M+1 from D	CMP16	CMP	word	True	False	CMPD	4259	0x10a3	-aaaa	Compare memory from stack pointer
EXTENDED	4	1	8	Compare M:M+1 from D	CMP16	CMP	word	True	False	CMPD	4275	0x10b3	-aaaa	Compare memory from stack pointer
INDEXED	2	2	4	X = EA	LEA_register	LEA	-	False	False	LEAX	48	0x30	-----	Load effective address into stack pointer
INDEXED	2	2	4	Y = EA	LEA_register	LEA	-	False	False	LEAY	49	0x31	-----	Load effective address into stack pointer
INDEXED	2	2	4	S = EA	LEA_pointer	LEA	-	False	False	LEAS	50	0x32	-----	Load effective address into stack pointer
INDEXED	2	2	4	U = EA	LEA_pointer	LEA	-	False	False	LEAU	51	0x33	-----	Load effective address into stack pointer
IMMEDIATE	2	2	5	S -= 1: MEM(S) = R; Push Register on S Stack	PSHS	PSH	byte	True	False	PSHS	52	0x34	-----	Push A, B, CC, DP, D, X, Y, U, or PC onto hardware stack
IMMEDIATE	2	2	5	R=MEM(S) : S += 1; Pull register from S Stack	PULS	PUL	byte	True	False	PULS	53	0x35	ccccc	Pull A, B, CC, DP, D, X, Y, U, or PC from hardware stack
IMMEDIATE	2	2	5	U -= 1: MEM(U) = R; Push Register on U Stack	PSHU	PSH	byte	True	False	PSHU	54	0x36	-----	Push A, B, CC, DP, D, X, Y, S, or PC onto user stack
IMMEDIATE	2	2	5	R=MEM(U) : U += 1; Pull register from U Stack	PULU	PUL	byte	True	False	PULU	55	0x37	ccccc	Pull A, B, CC, DP, D, X, Y, S, or PC from hardware stack
INHERENT	1	2	3	X = B+X (Unsigned)	ABX	ABX	-	False	False	ABX	58	0x3a	-----	Add B accumulator to X (unsigned)
IMMEDIATE	3	2	4	Compare M:M+1 from X	CMP16	CMP	word	True	False	CMPX	140	0x8c	-aaaa	Compare memory from stack pointer
IMMEDIATE	3	2	3	X = M:M+1	LD16	LD	word	True	False	LDX	142	0x8e	-aa0-	Load stack pointer from memory
DIRECT	2	2	6	Compare M:M+1 from X	CMP16	CMP	word	True	False	CMPX	156	0x9c	-aaaa	Compare memory from stack pointer
DIRECT	2	2	5	X = M:M+1	LD16	LD	word	True	False	LDX	158	0x9e	-aa0-	Load stack pointer from memory
DIRECT	2	2	5	M:M+1 = X	ST16	ST	word	False	True	STX	159	0x9f	-aa0-	Store stack pointer to memory
INDEXED	2	2	6	Compare M:M+1 from X	CMP16	CMP	word	True	False	CMPX	172	0xac	-aaaa	Compare memory from stack pointer
INDEXED	2	2	5	X = M:M+1	LD16	LD	word	True	False	LDX	174	0xae	-aa0-	Load stack pointer from memory
INDEXED	2	2	5	M:M+1 = X	ST16	ST	word	False	True	STX	175	0xaf	-aa0-	Store stack pointer to memory
EXTENDED	3	2	7	Compare M:M+1 from X	CMP16	CMP	word	True	False	CMPX	188	0xbc	-aaaa	Compare memory from stack pointer
EXTENDED	3	2	6	X = M:M+1	LD16	LD	word	True	False	LDX	190	0xbe	-aa0-	Load stack pointer from memory
EXTENDED	3	2	6	M:M+1 = X	ST16	ST	word	False	True	STX	191	0xbf	-aa0-	Store stack pointer to memory
IMMEDIATE	3	2	3	U = M:M+1	LD16	LD	word	True	False	LDU	206	0xce	-aa0-	Load stack pointer from memory
DIRECT	2	2	5	U = M:M+1	LD16	LD	word	True	False	LDU	222	0xde	-aa0-	Load stack pointer from memory
DIRECT	2	2	5	M:M+1 = U	ST16	ST	word	False	True	STU	223	0xdf	-aa0-	Store stack pointer to memory
INDEXED	2	2	5	U = M:M+1	LD16	LD	word	True	False	LDU	238	0xee	-aa0-	Load stack pointer from memory
INDEXED	2	2	5	M:M+1 = U	ST16	ST	word	False	True	STU	239	0xef	-aa0-	Store stack pointer to memory
EXTENDED	3	2	6	U = M:M+1	LD16	LD	word	True	False	LDU	254	0xfe	-aa0-	Load stack pointer from memory
EXTENDED	3	2	6	M:M+1 = U	ST16	ST	word	False	True	STU	255	0xff	-aa0-	Store stack pointer to memory
IMMEDIATE	4	2	5	Compare M:M+1 from Y	CMP16	CMP	word	True	False	CMPY	4236	0x108c	-aaaa	Compare memory from stack pointer
IMMEDIATE	4	2	4	Y = M:M+1	LD16	LD	word	True	False	LDY	4238	0x108e	-aa0-	Load stack pointer from memory
DIRECT	3	2	7	Compare M:M+1 from Y	CMP16	CMP	word	True	False	CMPY	4252	0x109c	-aaaa	Compare memory from stack pointer
DIRECT	3	2	6	Y = M:M+1	LD16	LD	word	True	False	LDY	4254	0x109e	-aa0-	Load stack pointer from memory
DIRECT	3	2	6	M:M+1 = Y	ST16	ST	word	False	True	STY	4255	0x109f	-aa0-	Store stack pointer to memory
INDEXED	3	2	7	Compare M:M+1 from Y	CMP16	CMP	word	True	False	CMPY	4268	0x10ac	-aaaa	Compare memory from stack pointer
INDEXED	3	2	6	Y = M:M+1	LD16	LD	word	True	False	LDY	4270	0x10ae	-aa0-	Load stack pointer from memory
INDEXED	3	2	6	M:M+1 = Y	ST16	ST	word	False	True	STY	4271	0x10af	-aa0-	Store stack pointer to memory
EXTENDED	4	2	8	Compare M:M+1 from Y	CMP16	CMP	word	True	False	CMPY	4284	0x10bc	-aaaa	Compare memory from stack pointer
EXTENDED	4	2	7	Y = M:M+1	LD16	LD	word	True	False	LDY	4286	0x10be	-aa0-	Load stack pointer from memory
EXTENDED	4	2	7	M:M+1 = Y	ST16	ST	word	False	True	STY	4287	0x10bf	-aa0-	Store stack pointer to memory
IMMEDIATE	4	2	4	S = M:M+1	LD16	LD	word	True	False	LDS	4302	0x10ce	-aa0-	Load stack pointer from memory
DIRECT	3	2	6	S = M:M+1	LD16	LD	word	True	False	LDS	4318	0x10de	-aa0-	Load stack pointer from memory
DIRECT	3	2	6	M:M+1 = S	ST16	ST	word	False	True	STS	4319	0x10df	-aa0-	Store stack pointer to memory
INDEXED	3	2	6	S = M:M+1	LD16	LD	word	True	False	LDS	4334	0x10ee	-aa0-	Load stack pointer from memory
INDEXED	3	2	6	M:M+1 = S	ST16	ST	word	False	True	STS	4335	0x10ef	-aa0-	Store stack pointer to memory
EXTENDED	4	2	7	S = M:M+1	LD16	LD	word	True	False	LDS	4350	0x10fe	-aa0-	Load stack pointer from memory
EXTENDED	4	2	7	M:M+1 = S	ST16	ST	word	False	True	STS	4351	0x10ff	-aa0-	Store stack pointer to memory
IMMEDIATE	4	2	5	Compare M:M+1 from U	CMP16	CMP	word	True	False	CMPU	4483	0x1183	-aaaa	Compare memory from stack pointer
IMMEDIATE	4	2	5	Compare M:M+1 from S	CMP16	CMP	word	True	False	CMPS	4492	0x118c	-aaaa	Compare memory from stack pointer
DIRECT	3	2	7	Compare M:M+1 from U	CMP16	CMP	word	True	False	CMPU	4499	0x1193	-aaaa	Compare memory from stack pointer
DIRECT	3	2	7	Compare M:M+1 from S	CMP16	CMP	word	True	False	CMPS	4508	0x119c	-aaaa	Compare memory from stack pointer
INDEXED	3	2	7	Compare M:M+1 from U	CMP16	CMP	word	True	False	CMPU	4515	0x11a3	-aaaa	Compare memory from stack pointer
INDEXED	3	2	7	Compare M:M+1 from S	CMP16	CMP	word	True	False	CMPS	4524	0x11ac	-aaaa	Compare memory from stack pointer
EXTENDED	4	2	8	Compare M:M+1 from U	CMP16	CMP	word	True	False	CMPU	4531	0x11b3	-aaaa	Compare memory from stack pointer
EXTENDED	4	2	8	Compare M:M+1 from S	CMP16	CMP	word	True	False	CMPS	4540	0x11bc	-aaaa	Compare memory from stack pointer
RELATIVE	2	3	3	Branch if plus	BPL	BPL	byte	False	False	BPL	42	0x2a	-----	Branch if plus
RELATIVE	2	3	3	Branch if minus	BMI	BMI	byte	False	False	BMI	43	0x2b	-----	Branch if minus
RELATIVE	4	3	5	Branch if plus	BPL	LBPL	byte	False	False	LBPL	4138	0x102a	-----	Branch if plus
RELATIVE	4	3	5	Branch if minus	BMI	LBMI	byte	False	False	LBMI	4139	0x102b	-----	Branch if minus
RELATIVE	2	4	3	Branch if valid twos complement result	BVC	BVC	byte	False	False	BVC	40	0x28	-----	Branch if valid twos complement result
RELATIVE	2	4	3	Branch if invalid twos complement result	BVS	BVS	byte	False	False	BVS	41	0x29	-----	Branch if invalid twos complement result
RELATIVE	2	4	3	Branch if greater than or equal (signed)	BGE	BGE	byte	False	False	BGE	44	0x2c	-----	Branch if greater than or equal (signed)
RELATIVE	2	4	3	Branch if less than (signed)	BLT	BLT	byte	False	False	BLT	45	0x2d	-----	Branch if less than (signed)
RELATIVE	2	4	3	Branch if greater (signed)	BGT	BGT	byte	False	False	BGT	46	0x2e	-----	Branch if greater (signed)
RELATIVE	2	4	3	Branch if less than or equal (signed)	BLE	BLE	byte	False	False	BLE	47	0x2f	-----	Branch if less than or equal (signed)
RELATIVE	4	4	5	Branch if valid twos complement result	BVC	LBVC	byte	False	False	LBVC	4136	0x1028	-----	Branch if valid twos complement result
RELATIVE	4	4	5	Branch if invalid twos complement result	BVS	LBVS	byte	False	False	LBVS	4137	0x1029	-----	Branch if invalid twos complement result
RELATIVE	4	4	5	Branch if greater than or equal (signed)	BGE	LBGE	byte	False	False	LBGE	4140	0x102c	-----	Branch if greater than or equal (signed)
RELATIVE	4	4	5	Branch if less than (signed)	BLT	LBLT	byte	False	False	LBLT	4141	0x102d	-----	Branch if less than (signed)
RELATIVE	4	4	5	Branch if greater (signed)	BGT	LBGT	byte	False	False	LBGT	4142	0x102e	-----	Branch if greater (signed)
RELATIVE	4	4	5	Branch if less than or equal (signed)	BLE	LBLE	byte	False	False	LBLE	4143	0x102f	-----	Branch if less than or equal (signed)
RELATIVE	2	5	3	Branch if higher (unsigned)	BHI	BHI	byte	False	False	BHI	34	0x22	-----	Branch if higher (unsigned)
RELATIVE	2	5	3	Branch if lower or same (unsigned)	BLS	BLS	byte	False	False	BLS	35	0x23	-----	Branch if lower or same (unsigned)
RELATIVE	2	5	3	Branch if higher or same (unsigned)	OTHER_INSTRUCTIONS	BHS/BCC	-	False	False	BHS/BCC	36	0x24	-----	Branch if lower (unsigned)
RELATIVE	2	5	3	Branch if lower (unsigned)	OTHER_INSTRUCTIONS	BLO/BCS	-	False	False	BLO/BCS	37	0x25	-----	Branch if lower (unsigned)
RELATIVE	2	5	3	Branch if not equal	BNE	BNE	byte	False	False	BNE	38	0x26	-----	Branch if not equal
RELATIVE	2	5	3	Branch if equal	BEQ	BEQ	byte	False	False	BEQ	39	0x27	-----	Branch if equal
RELATIVE	4	5	5	Branch if higher (unsigned)	BHI	LBHI	byte	False	False	LBHI	4130	0x1022	-----	Branch if higher (unsigned)
RELATIVE	4	5	5	Branch if lower or same (unsigned)	BLS	LBLS	byte	False	False	LBLS	4131	0x1023	-----	Branch if lower or same (unsigned)
RELATIVE	4	5	5	Branch if higher or same (unsigned)	OTHER_INSTRUCTIONS	LBHS/LBCC	-	False	False	LBHS/LBCC	4132	0x1024	-----	Branch if lower (unsigned)
RELATIVE	4	5	5	Branch if lower (unsigned)	OTHER_INSTRUCTIONS	LBLO/LBCS	-	False	False	LBLO/LBCS	4133	0x1025	-----	Branch if lower (unsigned)
RELATIVE	4	5	5	Branch if not equal	BNE	LBNE	byte	False	False	LBNE	4134	0x1026	-----	Branch if not equal
RELATIVE	4	5	5	Branch if equal	BEQ	LBEQ	byte	False	False	LBEQ	4135	0x1027	-----	Branch if equal
RELATIVE	3	6	5	Branch always	BRA	LBRA	byte	False	False	LBRA	22	0x16	-----	Branch always
RELATIVE	3	6	9	Branch to subroutine	BSR	LBSR	byte	False	False	LBSR	23	0x17	-----	Branch to subroutine
RELATIVE	2	6	3	Branch always	BRA	BRA	byte	False	False	BRA	32	0x20	-----	Branch always
RELATIVE	2	6	3	Branch never	BRN	BRN	byte	False	False	BRN	33	0x21	-----	Branch never
RELATIVE	2	6	7	Branch to subroutine	BSR	BSR	byte	False	False	BSR	141	0x8d	-----	Branch to subroutine
RELATIVE	4	6	5	Branch never	BRN	LBRN	byte	False	False	LBRN	4129	0x1021	-----	Branch never
DIRECT	2	7	3	pc = EA	JMP	JMP	-	False	False	JMP	14	0xe	-----	Jump
INHERENT	1	7	2	No Operation	NOP	NOP	-	False	False	NOP	18	0x12	-----	No operation
INHERENT	1	7	2	Synchronize to Interrupt	SYNC	SYNC	-	False	False	SYNC	19	0x13	-----	Synchronize with interrupt line
IMMEDIATE	2	7	3	|C = CC |||| IMM|	ORCC	OR	byte	True	False	ORCC	26	0x1a	ddddd	OR condition code register
IMMEDIATE	2	7	3	C = CC && IMM	ANDCC	AND	byte	True	False	ANDCC	28	0x1c	ddddd	AND condition code register
INHERENT	1	7	5	Return from subroutine	RTS	RTS	-	False	False	RTS	57	0x39	-----	Return from subroutine
INHERENT	1	7	6	Return from Interrupt	RTI	RTI	-	False	False	RTI	59	0x3b	-----	Return from interrupt
IMMEDIATE	2	7	21	CC = CC ^ IMM; (Wait for Interrupt)	CWAI	CWAI	byte	True	False	CWAI	60	0x3c	ddddd	AND condition code register, then wait for interrupt
INHERENT	1	7	19	Software interrupt 1	SWI	SWI	-	False	False	SWI	63	0x3f	-----	Software interrupt (absolute indirect)
INDEXED	2	7	3	pc = EA	JMP	JMP	-	False	False	JMP	110	0x6e	-----	Jump
EXTENDED	3	7	3	pc = EA	JMP	JMP	-	False	False	JMP	126	0x7e	-----	Jump
DIRECT	2	7	7	jump to subroutine	JSR	JSR	-	False	False	JSR	157	0x9d	-----	Jump to subroutine
INDEXED	2	7	7	jump to subroutine	JSR	JSR	-	False	False	JSR	173	0xad	-----	Jump to subroutine
EXTENDED	3	7	8	jump to subroutine	JSR	JSR	-	False	False	JSR	189	0xbd	-----	Jump to subroutine
INHERENT	2	7	20	Software interrupt 2	SWI2	SWI	-	False	False	SWI2	4159	0x103f	-----	Software interrupt (absolute indirect)
INHERENT	2	7	20	Software interrupt 3	SWI3	SWI	-	False	False	SWI3	4415	0x113f	-----	Software interrupt (absolute indirect)
VARIANT	1	8	1	Page 1 Instructions prefix	PAGE	PAGE	-	False	False	PAGE1+	16	0x10	+++++	Page 2 Instructions prefix
VARIANT	1	8	1	Page 2 Instructions prefix	PAGE	PAGE	-	False	False	PAGE2+	17	0x11	+++++	Page 2 Instructions prefix
INHERENT	1	8	-1		RESET	RESET	-	False	False	RESET	62	0x3e	*****	
