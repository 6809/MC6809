NEG;0;6;0x0;0;;DIRECT;NEG;2 bytes;NEG;M' = 0 - M
COM;0;6;0x3;3;;DIRECT;COM;2 bytes;COM;M' = 0 + M
LSR;0;6;0x4;4;;DIRECT;LSR;2 bytes;LSR;0 -> -> C b7 -> b0
ROR;0;6;0x6;6;;DIRECT;ROR;2 bytes;ROR;C -> -> C b7 -> b0
ASR;0;6;0x7;7;;DIRECT;ASR;2 bytes;ASR;b7 -> -> C b7 -> b0
LSL/ASL;0;6;0x8;8;;DIRECT;LSL;2 bytes;LSL;C = = 0 b7 = b0
ROL;0;6;0x9;9;;DIRECT;ROL;2 bytes;ROL;C = = C b7 = b0
DEC;0;6;0xa;10;;DIRECT;DEC;2 bytes;DEC;M' = M - 1
INC;0;6;0xc;12;;DIRECT;INC;2 bytes;INC;M' = M + 1
TST;0;6;0xd;13;;DIRECT;TST;2 bytes;TST;TEMP = M - 0
CLR;0;6;0xf;15;;DIRECT;CLR;2 bytes;CLR;TEMP = M M = 00 16
DAA;0;2;0x19;25;;INHERENT;DAA;1 bytes;DAA;Least Significant Nibble Least Significant Nibble CF(LSN) = 6 IFF 1) C = 1 or 2) LSN > 9 Most Significant Nibble Most Significant Nibble CF(MSN) = 6 IFF 1) C = 1 or 2) MSN > 9 or 3) MSN > 8 and LSN > 9
EXG;0;8;0x1e;30;;IMMEDIATE;EXG;2 bytes;EXG;R1 <-> R2
TFR;0;7;0x1f;31;;IMMEDIATE;TFR;2 bytes;TFR;R1 -> R2
MUL;0;11;0x3d;61;;INHERENT;MUL;1 bytes;MUL;ACCA':ACCB' = ACCA * ACCB
NEGA;0;2;0x40;64;A;INHERENT;NEG;1 bytes;NEG;M' = 0 - M
COMA;0;2;0x43;67;A;INHERENT;COM;1 bytes;COM;M' = 0 + M
LSRA;0;2;0x44;68;A;INHERENT;LSR;1 bytes;LSR;0 -> -> C b7 -> b0
RORA;0;2;0x46;70;A;INHERENT;ROR;1 bytes;ROR;C -> -> C b7 -> b0
ASRA;0;2;0x47;71;A;INHERENT;ASR;1 bytes;ASR;b7 -> -> C b7 -> b0
LSLA/ASLA;0;2;0x48;72;A;INHERENT;LSL;1 bytes;LSL;C = = 0 b7 = b0
ROLA;0;2;0x49;73;A;INHERENT;ROL;1 bytes;ROL;C = = C b7 = b0
DECA;0;2;0x4a;74;A;INHERENT;DEC;1 bytes;DEC;M' = M - 1
INCA;0;2;0x4c;76;A;INHERENT;INC;1 bytes;INC;M' = M + 1
TSTA;0;2;0x4d;77;A;INHERENT;TST;1 bytes;TST;TEMP = M - 0
CLRA;0;2;0x4f;79;A;INHERENT;CLR;1 bytes;CLR;TEMP = M M = 00 16
NEGB;0;2;0x50;80;B;INHERENT;NEG;1 bytes;NEG;M' = 0 - M
COMB;0;2;0x53;83;B;INHERENT;COM;1 bytes;COM;M' = 0 + M
LSRB;0;2;0x54;84;B;INHERENT;LSR;1 bytes;LSR;0 -> -> C b7 -> b0
RORB;0;2;0x56;86;B;INHERENT;ROR;1 bytes;ROR;C -> -> C b7 -> b0
ASRB;0;2;0x57;87;B;INHERENT;ASR;1 bytes;ASR;b7 -> -> C b7 -> b0
LSLB/ASLB;0;2;0x58;88;B;INHERENT;LSL;1 bytes;LSL;C = = 0 b7 = b0
ROLB;0;2;0x59;89;B;INHERENT;ROL;1 bytes;ROL;C = = C b7 = b0
DECB;0;2;0x5a;90;B;INHERENT;DEC;1 bytes;DEC;M' = M - 1
INCB;0;2;0x5c;92;B;INHERENT;INC;1 bytes;INC;M' = M + 1
TSTB;0;2;0x5d;93;B;INHERENT;TST;1 bytes;TST;TEMP = M - 0
CLRB;0;2;0x5f;95;B;INHERENT;CLR;1 bytes;CLR;TEMP = M M = 00 16
NEG;0;6;0x60;96;;INDEXED;NEG;2 bytes;NEG;M' = 0 - M
COM;0;6;0x63;99;;INDEXED;COM;2 bytes;COM;M' = 0 + M
LSR;0;6;0x64;100;;INDEXED;LSR;2 bytes;LSR;0 -> -> C b7 -> b0
ROR;0;6;0x66;102;;INDEXED;ROR;2 bytes;ROR;C -> -> C b7 -> b0
ASR;0;6;0x67;103;;INDEXED;ASR;2 bytes;ASR;b7 -> -> C b7 -> b0
LSL/ASL;0;6;0x68;104;;INDEXED;LSL;2 bytes;LSL;C = = 0 b7 = b0
ROL;0;6;0x69;105;;INDEXED;ROL;2 bytes;ROL;C = = C b7 = b0
DEC;0;6;0x6a;106;;INDEXED;DEC;2 bytes;DEC;M' = M - 1
INC;0;6;0x6c;108;;INDEXED;INC;2 bytes;INC;M' = M + 1
TST;0;6;0x6d;109;;INDEXED;TST;2 bytes;TST;TEMP = M - 0
CLR;0;6;0x6f;111;;INDEXED;CLR;2 bytes;CLR;TEMP = M M = 00 16
NEG;0;7;0x70;112;;EXTENDED;NEG;3 bytes;NEG;M' = 0 - M
COM;0;7;0x73;115;;EXTENDED;COM;3 bytes;COM;M' = 0 + M
LSR;0;7;0x74;116;;EXTENDED;LSR;3 bytes;LSR;0 -> -> C b7 -> b0
ROR;0;7;0x76;118;;EXTENDED;ROR;3 bytes;ROR;C -> -> C b7 -> b0
ASR;0;7;0x77;119;;EXTENDED;ASR;3 bytes;ASR;b7 -> -> C b7 -> b0
LSL/ASL;0;7;0x78;120;;EXTENDED;LSL;3 bytes;LSL;C = = 0 b7 = b0
ROL;0;7;0x79;121;;EXTENDED;ROL;3 bytes;ROL;C = = C b7 = b0
DEC;0;7;0x7a;122;;EXTENDED;DEC;3 bytes;DEC;M' = M - 1
INC;0;7;0x7c;124;;EXTENDED;INC;3 bytes;INC;M' = M + 1
TST;0;7;0x7d;125;;EXTENDED;TST;3 bytes;TST;TEMP = M - 0
CLR;0;7;0x7f;127;;EXTENDED;CLR;3 bytes;CLR;TEMP = M M = 00 16
SUBA;0;2;0x80;128;A;IMMEDIATE;SUB;2 bytes;SUB8;R' = R - M
CMPA;0;2;0x81;129;A;IMMEDIATE;CMP;2 bytes;CMP8;TEMP = R - M
SBCA;0;2;0x82;130;A;IMMEDIATE;SBC;2 bytes;SBC;R' = R - M - C
ANDA;0;2;0x84;132;A;IMMEDIATE;AND;2 bytes;AND;R' = R AND M
BITA;0;2;0x85;133;A;IMMEDIATE;BIT;2 bytes;BIT;TEMP = R AND M
LDA;0;2;0x86;134;A;IMMEDIATE;LD;2 bytes;LD8;R' = M
EORA;0;2;0x88;136;A;IMMEDIATE;EOR;2 bytes;EOR;R' = R XOR M
ADCA;0;2;0x89;137;A;IMMEDIATE;ADC;2 bytes;ADC;R' = R + M + C
ORA;0;2;0x8a;138;A;IMMEDIATE;OR;2 bytes;OR;R' = R OR M
ADDA;0;2;0x8b;139;A;IMMEDIATE;ADD;2 bytes;ADD8;R' = R + M
SUBA;0;4;0x90;144;A;DIRECT;SUB;2 bytes;SUB8;R' = R - M
CMPA;0;4;0x91;145;A;DIRECT;CMP;2 bytes;CMP8;TEMP = R - M
SBCA;0;4;0x92;146;A;DIRECT;SBC;2 bytes;SBC;R' = R - M - C
ANDA;0;4;0x94;148;A;DIRECT;AND;2 bytes;AND;R' = R AND M
BITA;0;4;0x95;149;A;DIRECT;BIT;2 bytes;BIT;TEMP = R AND M
LDA;0;4;0x96;150;A;DIRECT;LD;2 bytes;LD8;R' = M
STA;0;4;0x97;151;A;DIRECT;ST;2 bytes;ST8;M' = R
EORA;0;4;0x98;152;A;DIRECT;EOR;2 bytes;EOR;R' = R XOR M
ADCA;0;4;0x99;153;A;DIRECT;ADC;2 bytes;ADC;R' = R + M + C
ORA;0;4;0x9a;154;A;DIRECT;OR;2 bytes;OR;R' = R OR M
ADDA;0;4;0x9b;155;A;DIRECT;ADD;2 bytes;ADD8;R' = R + M
SUBA;0;4;0xa0;160;A;INDEXED;SUB;2 bytes;SUB8;R' = R - M
CMPA;0;4;0xa1;161;A;INDEXED;CMP;2 bytes;CMP8;TEMP = R - M
SBCA;0;4;0xa2;162;A;INDEXED;SBC;2 bytes;SBC;R' = R - M - C
ANDA;0;4;0xa4;164;A;INDEXED;AND;2 bytes;AND;R' = R AND M
BITA;0;4;0xa5;165;A;INDEXED;BIT;2 bytes;BIT;TEMP = R AND M
LDA;0;4;0xa6;166;A;INDEXED;LD;2 bytes;LD8;R' = M
STA;0;4;0xa7;167;A;INDEXED;ST;2 bytes;ST8;M' = R
EORA;0;4;0xa8;168;A;INDEXED;EOR;2 bytes;EOR;R' = R XOR M
ADCA;0;4;0xa9;169;A;INDEXED;ADC;2 bytes;ADC;R' = R + M + C
ORA;0;4;0xaa;170;A;INDEXED;OR;2 bytes;OR;R' = R OR M
ADDA;0;4;0xab;171;A;INDEXED;ADD;2 bytes;ADD8;R' = R + M
SUBA;0;5;0xb0;176;A;EXTENDED;SUB;3 bytes;SUB8;R' = R - M
CMPA;0;5;0xb1;177;A;EXTENDED;CMP;3 bytes;CMP8;TEMP = R - M
SBCA;0;5;0xb2;178;A;EXTENDED;SBC;3 bytes;SBC;R' = R - M - C
ANDA;0;5;0xb4;180;A;EXTENDED;AND;3 bytes;AND;R' = R AND M
BITA;0;5;0xb5;181;A;EXTENDED;BIT;3 bytes;BIT;TEMP = R AND M
LDA;0;5;0xb6;182;A;EXTENDED;LD;3 bytes;LD8;R' = M
STA;0;5;0xb7;183;A;EXTENDED;ST;3 bytes;ST8;M' = R
EORA;0;5;0xb8;184;A;EXTENDED;EOR;3 bytes;EOR;R' = R XOR M
ADCA;0;5;0xb9;185;A;EXTENDED;ADC;3 bytes;ADC;R' = R + M + C
ORA;0;5;0xba;186;A;EXTENDED;OR;3 bytes;OR;R' = R OR M
ADDA;0;5;0xbb;187;A;EXTENDED;ADD;3 bytes;ADD8;R' = R + M
SUBB;0;2;0xc0;192;B;IMMEDIATE;SUB;2 bytes;SUB8;R' = R - M
CMPB;0;2;0xc1;193;B;IMMEDIATE;CMP;2 bytes;CMP8;TEMP = R - M
SBCB;0;2;0xc2;194;B;IMMEDIATE;SBC;2 bytes;SBC;R' = R - M - C
ANDB;0;2;0xc4;196;B;IMMEDIATE;AND;2 bytes;AND;R' = R AND M
BITB;0;2;0xc5;197;B;IMMEDIATE;BIT;2 bytes;BIT;TEMP = R AND M
LDB;0;2;0xc6;198;B;IMMEDIATE;LD;2 bytes;LD8;R' = M
EORB;0;2;0xc8;200;B;IMMEDIATE;EOR;2 bytes;EOR;R' = R XOR M
ADCB;0;2;0xc9;201;B;IMMEDIATE;ADC;2 bytes;ADC;R' = R + M + C
ORB;0;2;0xca;202;B;IMMEDIATE;OR;2 bytes;OR;R' = R OR M
ADDB;0;2;0xcb;203;B;IMMEDIATE;ADD;2 bytes;ADD8;R' = R + M
SUBB;0;4;0xd0;208;B;DIRECT;SUB;2 bytes;SUB8;R' = R - M
CMPB;0;4;0xd1;209;B;DIRECT;CMP;2 bytes;CMP8;TEMP = R - M
SBCB;0;4;0xd2;210;B;DIRECT;SBC;2 bytes;SBC;R' = R - M - C
ANDB;0;4;0xd4;212;B;DIRECT;AND;2 bytes;AND;R' = R AND M
BITB;0;4;0xd5;213;B;DIRECT;BIT;2 bytes;BIT;TEMP = R AND M
LDB;0;4;0xd6;214;B;DIRECT;LD;2 bytes;LD8;R' = M
STB;0;4;0xd7;215;B;DIRECT;ST;2 bytes;ST8;M' = R
EORB;0;4;0xd8;216;B;DIRECT;EOR;2 bytes;EOR;R' = R XOR M
ADCB;0;4;0xd9;217;B;DIRECT;ADC;2 bytes;ADC;R' = R + M + C
ORB;0;4;0xda;218;B;DIRECT;OR;2 bytes;OR;R' = R OR M
ADDB;0;4;0xdb;219;B;DIRECT;ADD;2 bytes;ADD8;R' = R + M
SUBB;0;4;0xe0;224;B;INDEXED;SUB;2 bytes;SUB8;R' = R - M
CMPB;0;4;0xe1;225;B;INDEXED;CMP;2 bytes;CMP8;TEMP = R - M
SBCB;0;4;0xe2;226;B;INDEXED;SBC;2 bytes;SBC;R' = R - M - C
ANDB;0;4;0xe4;228;B;INDEXED;AND;2 bytes;AND;R' = R AND M
BITB;0;4;0xe5;229;B;INDEXED;BIT;2 bytes;BIT;TEMP = R AND M
LDB;0;4;0xe6;230;B;INDEXED;LD;2 bytes;LD8;R' = M
STB;0;4;0xe7;231;B;INDEXED;ST;2 bytes;ST8;M' = R
EORB;0;4;0xe8;232;B;INDEXED;EOR;2 bytes;EOR;R' = R XOR M
ADCB;0;4;0xe9;233;B;INDEXED;ADC;2 bytes;ADC;R' = R + M + C
ORB;0;4;0xea;234;B;INDEXED;OR;2 bytes;OR;R' = R OR M
ADDB;0;4;0xeb;235;B;INDEXED;ADD;2 bytes;ADD8;R' = R + M
SUBB;0;5;0xf0;240;B;EXTENDED;SUB;3 bytes;SUB8;R' = R - M
CMPB;0;5;0xf1;241;B;EXTENDED;CMP;3 bytes;CMP8;TEMP = R - M
SBCB;0;5;0xf2;242;B;EXTENDED;SBC;3 bytes;SBC;R' = R - M - C
ANDB;0;5;0xf4;244;B;EXTENDED;AND;3 bytes;AND;R' = R AND M
BITB;0;5;0xf5;245;B;EXTENDED;BIT;3 bytes;BIT;TEMP = R AND M
LDB;0;5;0xf6;246;B;EXTENDED;LD;3 bytes;LD8;R' = M
STB;0;5;0xf7;247;B;EXTENDED;ST;3 bytes;ST8;M' = R
EORB;0;5;0xf8;248;B;EXTENDED;EOR;3 bytes;EOR;R' = R XOR M
ADCB;0;5;0xf9;249;B;EXTENDED;ADC;3 bytes;ADC;R' = R + M + C
ORB;0;5;0xfa;250;B;EXTENDED;OR;3 bytes;OR;R' = R OR M
ADDB;0;5;0xfb;251;B;EXTENDED;ADD;3 bytes;ADD8;R' = R + M
SEX;1;2;0x1d;29;;INHERENT;SEX;1 bytes;SEX;If bit seven of ACCB is set then ACCA' = FF 16 else ACCA' = 00 16
SUBD;1;4;0x83;131;D;IMMEDIATE;SUB;3 bytes;SUB16;R' = R - M:M+1
SUBD;1;6;0x93;147;D;DIRECT;SUB;2 bytes;SUB16;R' = R - M:M+1
SUBD;1;6;0xa3;163;D;INDEXED;SUB;2 bytes;SUB16;R' = R - M:M+1
SUBD;1;7;0xb3;179;D;EXTENDED;SUB;3 bytes;SUB16;R' = R - M:M+1
ADDD;1;4;0xc3;195;D;IMMEDIATE;ADD;3 bytes;ADD16;R' = R + M:M+1
LDD;1;3;0xcc;204;D;IMMEDIATE;LD;3 bytes;LD16;R' = M:M+1
ADDD;1;6;0xd3;211;D;DIRECT;ADD;2 bytes;ADD16;R' = R + M:M+1
LDD;1;5;0xdc;220;D;DIRECT;LD;2 bytes;LD16;R' = M:M+1
STD;1;5;0xdd;221;D;DIRECT;ST;2 bytes;ST16;M':M+1' = R
ADDD;1;6;0xe3;227;D;INDEXED;ADD;2 bytes;ADD16;R' = R + M:M+1
LDD;1;5;0xec;236;D;INDEXED;LD;2 bytes;LD16;R' = M:M+1
STD;1;5;0xed;237;D;INDEXED;ST;2 bytes;ST16;M':M+1' = R
ADDD;1;7;0xf3;243;D;EXTENDED;ADD;3 bytes;ADD16;R' = R + M:M+1
LDD;1;6;0xfc;252;D;EXTENDED;LD;3 bytes;LD16;R' = M:M+1
STD;1;6;0xfd;253;D;EXTENDED;ST;3 bytes;ST16;M':M+1' = R
CMPD;1;5;0x1083;4227;D;IMMEDIATE;CMP;4 bytes;CMP16;TEMP = R - M:M+1
CMPD;1;7;0x1093;4243;D;DIRECT;CMP;3 bytes;CMP16;TEMP = R - M:M+1
CMPD;1;7;0x10a3;4259;D;INDEXED;CMP;3 bytes;CMP16;TEMP = R - M:M+1
CMPD;1;8;0x10b3;4275;D;EXTENDED;CMP;4 bytes;CMP16;TEMP = R - M:M+1
LEAX;2;4;0x30;48;X;INDEXED;LEA;2 bytes;LEA_register;R' = EA
LEAY;2;4;0x31;49;Y;INDEXED;LEA;2 bytes;LEA_register;R' = EA
LEAS;2;4;0x32;50;S;INDEXED;LEA;2 bytes;LEA_pointer;R' = EA
LEAU;2;4;0x33;51;U;INDEXED;LEA;2 bytes;LEA_pointer;R' = EA
PSHS;2;5;0x34;52;S;IMMEDIATE;PSH;2 bytes;PSHS;IFF b7 of postbyte set, then: SP' = SP-1, (SP) = PCL SP' = SP-1, (SP) = PCH IFF b6 of postbyte set, then: SP' = SP-1, (SP) = USL SP' = SP-1, (SP) = USH IFF b5 of postbyte set, then: SP' = SP-1, (SP) = IYL SP' = SP-1, (SP) = IYH IFF b4 of postbyte set, then: SP' = SP-1, (SP) = IXL SP' = SP-1, (SP) = IXH IFF b3 of postbyte set, then: SP' = SP-1, (SP) = DPR IFF b2 of postbyte set, then: SP' = SP-1, (SP) = ACCB IFF b1 of postbyte set, then: SP' = SP-1, (SP) = ACCA IFF b0 of postbyte set, then: SP' = SP-1, (SP) = CCR
PULS;2;5;0x35;53;S;IMMEDIATE;PUL;2 bytes;PULS;IFF b0 of postbyte set, then: CCR' = (SP), SP' = SP+1 IFF b1 of postbyte set, then: ACCA' = (SP), SP' = SP+1 IFF b2 of postbyte set, then: ACCB' = (SP), SP' = SP+1 IFF b3 of postbyte set, then: DPR' = (SP), SP'  = SP+1 IFF b4 of postbyte set, then: IXH' IXL' = (SP), SP' = SP+1 = (SP), SP' = SP+1 IFF b5 of postbyte set, then: IYH' IYL' = (SP), SP' = SP+1 = (SP), SP' = SP+1 IFF b6 of postbyte set, then: USH' USL' = (SP), SP' = SP+1 = (SP), SP' = SP+1 IFF b7 of postbyte set, then: PCH' PCL' = (SP), SP' = SP+1 = (SP), SP' = SP+1
PSHU;2;5;0x36;54;U;IMMEDIATE;PSH;2 bytes;PSHU;IFF b7 of postbyte set, then: US' = US-1, (US) = PCL US' = US-1, (US) = PCH IFF b6 of postbyte set, then: US' = US-1, (US) = SPL US' = US-1, (US) = SPH IFF b5 of postbyte set, then: US' = US-1, (US) = IYL US' = US-1, (US) = IYH IFF b4 of postbyte set, then: US' = US-1, (US) = IXL US' = US-1, (US) = IXH IFF b3 of postbyte set, then: US' = US-1, (US) = DPR IFF b2 of postbyte set, then: US' = US-1, (US) = ACCB IFF b1 of postbyte set, then: US' = US-1, (US) = ACCA IFF b0 of postbyte set, then: US' = US-1, (US) = CCR
PULU;2;5;0x37;55;U;IMMEDIATE;PUL;2 bytes;PULU;IFF b0 of postbyte set, then: CCR' = (US), US' = US+1 IFF b1 of postbyte set, then: ACCA' = (US), US' = US+1 IFF b2 of postbyte set, then: ACCB' = (US), US' = US+1 IFF b3 of postbyte set, then: DPR' = (US), US' = US+1 IFF b4 of postbyte set, then: IXH' IXL' = (US), US' = US+1 = (US), US' = US+1 IFF b5 of postbyte set, then: IYH' IYL' = (US), US' = US+1 = (US), US' = US+1 IFF b6 of postbyte set, then: SPH' SPL' = (US), US' = US+1 = (US), US' = US+1 IFF b7 of postbyte set, then: PCH' PCL' = (US), US' = US+1 = (US), US' = US+1
ABX;2;3;0x3a;58;;INHERENT;ABX;1 bytes;ABX;IX' = IX + ACCB
CMPX;2;4;0x8c;140;X;IMMEDIATE;CMP;3 bytes;CMP16;TEMP = R - M:M+1
LDX;2;3;0x8e;142;X;IMMEDIATE;LD;3 bytes;LD16;R' = M:M+1
CMPX;2;6;0x9c;156;X;DIRECT;CMP;2 bytes;CMP16;TEMP = R - M:M+1
LDX;2;5;0x9e;158;X;DIRECT;LD;2 bytes;LD16;R' = M:M+1
STX;2;5;0x9f;159;X;DIRECT;ST;2 bytes;ST16;M':M+1' = R
CMPX;2;6;0xac;172;X;INDEXED;CMP;2 bytes;CMP16;TEMP = R - M:M+1
LDX;2;5;0xae;174;X;INDEXED;LD;2 bytes;LD16;R' = M:M+1
STX;2;5;0xaf;175;X;INDEXED;ST;2 bytes;ST16;M':M+1' = R
CMPX;2;7;0xbc;188;X;EXTENDED;CMP;3 bytes;CMP16;TEMP = R - M:M+1
LDX;2;6;0xbe;190;X;EXTENDED;LD;3 bytes;LD16;R' = M:M+1
STX;2;6;0xbf;191;X;EXTENDED;ST;3 bytes;ST16;M':M+1' = R
LDU;2;3;0xce;206;U;IMMEDIATE;LD;3 bytes;LD16;R' = M:M+1
LDU;2;5;0xde;222;U;DIRECT;LD;2 bytes;LD16;R' = M:M+1
STU;2;5;0xdf;223;U;DIRECT;ST;2 bytes;ST16;M':M+1' = R
LDU;2;5;0xee;238;U;INDEXED;LD;2 bytes;LD16;R' = M:M+1
STU;2;5;0xef;239;U;INDEXED;ST;2 bytes;ST16;M':M+1' = R
LDU;2;6;0xfe;254;U;EXTENDED;LD;3 bytes;LD16;R' = M:M+1
STU;2;6;0xff;255;U;EXTENDED;ST;3 bytes;ST16;M':M+1' = R
CMPY;2;5;0x108c;4236;Y;IMMEDIATE;CMP;4 bytes;CMP16;TEMP = R - M:M+1
LDY;2;4;0x108e;4238;Y;IMMEDIATE;LD;4 bytes;LD16;R' = M:M+1
CMPY;2;7;0x109c;4252;Y;DIRECT;CMP;3 bytes;CMP16;TEMP = R - M:M+1
LDY;2;6;0x109e;4254;Y;DIRECT;LD;3 bytes;LD16;R' = M:M+1
STY;2;6;0x109f;4255;Y;DIRECT;ST;3 bytes;ST16;M':M+1' = R
CMPY;2;7;0x10ac;4268;Y;INDEXED;CMP;3 bytes;CMP16;TEMP = R - M:M+1
LDY;2;6;0x10ae;4270;Y;INDEXED;LD;3 bytes;LD16;R' = M:M+1
STY;2;6;0x10af;4271;Y;INDEXED;ST;3 bytes;ST16;M':M+1' = R
CMPY;2;8;0x10bc;4284;Y;EXTENDED;CMP;4 bytes;CMP16;TEMP = R - M:M+1
LDY;2;7;0x10be;4286;Y;EXTENDED;LD;4 bytes;LD16;R' = M:M+1
STY;2;7;0x10bf;4287;Y;EXTENDED;ST;4 bytes;ST16;M':M+1' = R
LDS;2;4;0x10ce;4302;S;IMMEDIATE;LD;4 bytes;LD16;R' = M:M+1
LDS;2;6;0x10de;4318;S;DIRECT;LD;3 bytes;LD16;R' = M:M+1
STS;2;6;0x10df;4319;S;DIRECT;ST;3 bytes;ST16;M':M+1' = R
LDS;2;6;0x10ee;4334;S;INDEXED;LD;3 bytes;LD16;R' = M:M+1
STS;2;6;0x10ef;4335;S;INDEXED;ST;3 bytes;ST16;M':M+1' = R
LDS;2;7;0x10fe;4350;S;EXTENDED;LD;4 bytes;LD16;R' = M:M+1
STS;2;7;0x10ff;4351;S;EXTENDED;ST;4 bytes;ST16;M':M+1' = R
CMPU;2;5;0x1183;4483;U;IMMEDIATE;CMP;4 bytes;CMP16;TEMP = R - M:M+1
CMPS;2;5;0x118c;4492;S;IMMEDIATE;CMP;4 bytes;CMP16;TEMP = R - M:M+1
CMPU;2;7;0x1193;4499;U;DIRECT;CMP;3 bytes;CMP16;TEMP = R - M:M+1
CMPS;2;7;0x119c;4508;S;DIRECT;CMP;3 bytes;CMP16;TEMP = R - M:M+1
CMPU;2;7;0x11a3;4515;U;INDEXED;CMP;3 bytes;CMP16;TEMP = R - M:M+1
CMPS;2;7;0x11ac;4524;S;INDEXED;CMP;3 bytes;CMP16;TEMP = R - M:M+1
CMPU;2;8;0x11b3;4531;U;EXTENDED;CMP;4 bytes;CMP16;TEMP = R - M:M+1
CMPS;2;8;0x11bc;4540;S;EXTENDED;CMP;4 bytes;CMP16;TEMP = R - M:M+1
BPL;3;3;0x2a;42;;RELATIVE;BPL;2 bytes;BPL;TEMP = MI IFF N = 0 then PC' = PC + TEMP
BMI;3;3;0x2b;43;;RELATIVE;BMI;2 bytes;BMI;TEMP = MI IFF N = 1 then PC' = PC + TEMP
LBPL;3;5;0x102a;4138;;RELATIVE;LBPL;4 bytes;BPL;TEMP = MI IFF N = 0 then PC' = PC + TEMP
LBMI;3;5;0x102b;4139;;RELATIVE;LBMI;4 bytes;BMI;TEMP = MI IFF N = 1 then PC' = PC + TEMP
BVC;4;3;0x28;40;;RELATIVE;BVC;2 bytes;BVC;TEMP = MI IFF V = 0 then PC' = PC + TEMP
BVS;4;3;0x29;41;;RELATIVE;BVS;2 bytes;BVS;TEMP' = MI IFF V = 1 then PC' = PC + TEMP
BGE;4;3;0x2c;44;;RELATIVE;BGE;2 bytes;BGE;TEMP = MI IFF [N XOR V] = 0 then PC' = PC + TEMP
BLT;4;3;0x2d;45;;RELATIVE;BLT;2 bytes;BLT;TEMP = MI IFF [ N XOR V ] = 1 then PC' = PC + TEMP
BGT;4;3;0x2e;46;;RELATIVE;BGT;2 bytes;BGT;TEMP = MI IFF Z AND [N XOR V] = 0 then PC' = PC + TEMP
BLE;4;3;0x2f;47;;RELATIVE;BLE;2 bytes;BLE;TEMP = MI IFF Z OR [ N XOR V ] = 1 then PC' = PC + TEMP
LBVC;4;5;0x1028;4136;;RELATIVE;LBVC;4 bytes;BVC;TEMP = MI IFF V = 0 then PC' = PC + TEMP
LBVS;4;5;0x1029;4137;;RELATIVE;LBVS;4 bytes;BVS;TEMP' = MI IFF V = 1 then PC' = PC + TEMP
LBGE;4;5;0x102c;4140;;RELATIVE;LBGE;4 bytes;BGE;TEMP = MI IFF [N XOR V] = 0 then PC' = PC + TEMP
LBLT;4;5;0x102d;4141;;RELATIVE;LBLT;4 bytes;BLT;TEMP = MI IFF [ N XOR V ] = 1 then PC' = PC + TEMP
LBGT;4;5;0x102e;4142;;RELATIVE;LBGT;4 bytes;BGT;TEMP = MI IFF Z AND [N XOR V] = 0 then PC' = PC + TEMP
LBLE;4;5;0x102f;4143;;RELATIVE;LBLE;4 bytes;BLE;TEMP = MI IFF Z OR [ N XOR V ] = 1 then PC' = PC + TEMP
BHI;5;3;0x22;34;;RELATIVE;BHI;2 bytes;BHI;TEMP = MI IFF [ C OR Z ] = 0 then PC' = PC + TEMP
BLS;5;3;0x23;35;;RELATIVE;BLS;2 bytes;BLS;TEMP = MI IFF (C OR Z) = 1 then PC' = PC + TEMP
BHS/BCC;5;3;0x24;36;;RELATIVE;BHS/BCC;2 bytes;OTHER_INSTRUCTIONS;
BLO/BCS;5;3;0x25;37;;RELATIVE;BLO/BCS;2 bytes;OTHER_INSTRUCTIONS;
BNE;5;3;0x26;38;;RELATIVE;BNE;2 bytes;BNE;TEMP = MI IFF Z = 0 then PC' = PC + TEMP
BEQ;5;3;0x27;39;;RELATIVE;BEQ;2 bytes;BEQ;TEMP = MI IFF Z = 1 then PC' = PC + TEMP
LBHI;5;5;0x1022;4130;;RELATIVE;LBHI;4 bytes;BHI;TEMP = MI IFF [ C OR Z ] = 0 then PC' = PC + TEMP
LBLS;5;5;0x1023;4131;;RELATIVE;LBLS;4 bytes;BLS;TEMP = MI IFF (C OR Z) = 1 then PC' = PC + TEMP
LBHS/LBCC;5;5;0x1024;4132;;RELATIVE;LBHS/LBCC;4 bytes;OTHER_INSTRUCTIONS;
LBLO/LBCS;5;5;0x1025;4133;;RELATIVE;LBLO/LBCS;4 bytes;OTHER_INSTRUCTIONS;
LBNE;5;5;0x1026;4134;;RELATIVE;LBNE;4 bytes;BNE;TEMP = MI IFF Z = 0 then PC' = PC + TEMP
LBEQ;5;5;0x1027;4135;;RELATIVE;LBEQ;4 bytes;BEQ;TEMP = MI IFF Z = 1 then PC' = PC + TEMP
LBRA;6;5;0x16;22;;RELATIVE;LBRA;3 bytes;BRA;TEMP = MI PC' = PC + TEMP
LBSR;6;9;0x17;23;;RELATIVE;LBSR;3 bytes;BSR;TEMP = MI SP' = SP-1, (SP) = PCL SP' = SP-1, (SP) = PCH PC' = PC + TEMP
BRA;6;3;0x20;32;;RELATIVE;BRA;2 bytes;BRA;TEMP = MI PC' = PC + TEMP
BRN;6;3;0x21;33;;RELATIVE;BRN;2 bytes;BRN;TEMP = MI
BSR;6;7;0x8d;141;;RELATIVE;BSR;2 bytes;BSR;TEMP = MI SP' = SP-1, (SP) = PCL SP' = SP-1, (SP) = PCH PC' = PC + TEMP
LBRN;6;5;0x1021;4129;;RELATIVE;LBRN;4 bytes;BRN;TEMP = MI
JMP;7;3;0xe;14;;DIRECT;JMP;2 bytes;JMP;PC' = EA
NOP;7;2;0x12;18;;INHERENT;NOP;1 bytes;NOP;Not affected.
SYNC;7;2;0x13;19;;INHERENT;SYNC;1 bytes;SYNC;Stop processing instructions
ORCC;7;3;0x1a;26;CC;IMMEDIATE;OR;2 bytes;ORCC;R' = R OR MI
ANDCC;7;3;0x1c;28;CC;IMMEDIATE;AND;2 bytes;ANDCC;R' = R AND MI
RTS;7;5;0x39;57;;INHERENT;RTS;1 bytes;RTS;PCH' = (SP), SP' = SP+1 PCL' = (SP), SP' = SP+1
RTI;7;6;0x3b;59;;INHERENT;RTI;1 bytes;RTI;IFF CCR bit E is set, then: ACCA' ACCB' DPR' IXH' IXL' IYH' IYL' USH' USL' PCH' PCL' = (SP), SP' = SP+1 = (SP), SP' = SP+1 = (SP), SP' = SP+1 = (SP), SP' = SP+1 = (SP), SP' = SP+1 = (SP), SP' = SP+1 = (SP), SP' = SP+1 = (SP), SP' = SP+1 = (SP), SP' = SP+1 = (SP), SP' = SP+1 = (SP), SP' = SP+1 IFF CCR bit E is clear, then: PCH' PCL' = (SP), SP' = SP+1 = (SP), SP' = SP+1
CWAI;7;21;0x3c;60;;IMMEDIATE;CWAI;2 bytes;CWAI;CCR = CCR AND MI (Possibly clear masks) Set E (entire state saved) SP' = SP-1, (SP) = PCL SP' = SP-1, (SP) = PCH SP' = SP-1, (SP) = USL SP' = SP-1, (SP) = USH SP' = SP-1, (SP) = IYL SP' = SP-1, (SP) = IYH SP' = SP-1, (SP) = IXL SP' = SP-1, (SP) = IXH SP' = SP-1, (SP) = DPR SP' = SP-1, (SP) = ACCB SP' = SP-1, (SP) = ACCA SP' = SP-1, (SP) = CCR
SWI;7;19;0x3f;63;;INHERENT;SWI;1 bytes;SWI;Set E (entire state will be saved) SP' = SP-1, (SP) = PCL SP' = SP-1, (SP) = PCH SP' = SP-1, (SP) = USL SP' = SP-1, (SP) = USH SP' = SP-1, (SP) = IYL SP' = SP-1, (SP) = IYH SP' = SP-1, (SP) = IXL SP' = SP-1, (SP) = IXH SP' = SP-1, (SP) = DPR SP' = SP-1, (SP) = ACCB SP' = SP-1, (SP) = ACCA SP' = SP-1, (SP) = CCR Set I, F (mask interrupts) PC' = (FFFA):(FFFB)
JMP;7;3;0x6e;110;;INDEXED;JMP;2 bytes;JMP;PC' = EA
JMP;7;3;0x7e;126;;EXTENDED;JMP;3 bytes;JMP;PC' = EA
JSR;7;7;0x9d;157;;DIRECT;JSR;2 bytes;JSR;SP' = SP-1, (SP) = PCL SP' = SP-1, (SP) = PCH PC' =EA
JSR;7;7;0xad;173;;INDEXED;JSR;2 bytes;JSR;SP' = SP-1, (SP) = PCL SP' = SP-1, (SP) = PCH PC' =EA
JSR;7;8;0xbd;189;;EXTENDED;JSR;3 bytes;JSR;SP' = SP-1, (SP) = PCL SP' = SP-1, (SP) = PCH PC' =EA
SWI2;7;20;0x103f;4159;;INHERENT;SWI;2 bytes;SWI2;Set E (entire state saved) SP' = SP-1, (SP) = PCL SP' = SP-1, (SP) = PCH SP' = SP-1, (SP) = USL SP' = SP-1, (SP) = USH SP' = SP-1, (SP) = IYL SP' = SP-1, (SP) = IYH SP' = SP-1, (SP) = IXL SP' = SP-1, (SP) = IXH SP' = SP-1, (SP) = DPR SP' = SP-1, (SP) = ACCB SP' = SP-1, (SP) = ACCA SP' = SP-1, (SP) = CCR PC' = (FFF4):(FFF5)
SWI3;7;20;0x113f;4415;;INHERENT;SWI;2 bytes;SWI3;Set E (entire state will be saved) SP' = SP-1, (SP) = PCL SP' = SP-1, (SP) = PCH SP' = SP-1, (SP) = USL SP' = SP-1, (SP) = USH SP' = SP-1, (SP) = IYL SP' = SP-1, (SP) = IYH SP' = SP-1, (SP) = IXL SP' = SP-1, (SP) = IXH SP' = SP-1, (SP) = DPR SP' = SP-1, (SP) = ACCB SP' = SP-1, (SP) = ACCA SP' = SP-1, (SP) = CCR PC' = (FFF2):(FFF3)
PAGE1+;8;1;0x10;16;;VARIANT;PAGE;1 bytes;PAGE;
PAGE2+;8;1;0x11;17;;VARIANT;PAGE;1 bytes;PAGE;
RESET*;8;-1;0x3e;62;;INHERENT;RESET;1 bytes;RESET;
