mnemonic	category	instr_info_key	opcode_hex	cycles	opcode	addr_mode	instruction	bytes	mem_access	desc	HNZVC	instr_desc
NEG	0	NEG	0x0	6	0	DIRECT	NEG	2	byte	M = !M + 1	uaaaa	Negate accumulator or memory
COM	0	COM	0x3	6	3	DIRECT	COM	2	byte	M = complement(M)	-aa01	Complement accumulator or memory location
LSR	0	LSR	0x4	6	4	DIRECT	LSR	2	byte	Logical shift M right	-0a-s	Logical shift right accumulator or memory location
ROR	0	ROR	0x6	6	6	DIRECT	ROR	2	byte	Rotate M Right thru carry	-aa-s	Rotate accumulator or memory right
ASR	0	ASR	0x7	6	7	DIRECT	ASR	2	byte	Arithmetic shift M right	uaa-s	Arithmetic shift of accumulator or memory right
LSL/ASL	0	LSL	0x8	6	8	DIRECT	LSL	2	byte	Logical shift M left	naaas	Logical shift left accumulator or memory location
ROL	0	ROL	0x9	6	9	DIRECT	ROL	2	byte	Rotate M left thru carry	-aaas	Rotate accumulator or memory left
DEC	0	DEC	0xa	6	10	DIRECT	DEC	2	byte	M = M  1	-aaa-	Decrement accumulator or memory location
INC	0	INC	0xc	6	12	DIRECT	INC	2	byte	M = M + 1	-aaa-	Increment accumulator or memory location
TST	0	TST	0xd	6	13	DIRECT	TST	2	byte	Test M	-aa0-	Test accumulator or memory location
CLR	0	CLR	0xf	6	15	DIRECT	CLR	2	byte	M = 0	-0100	Clear accumulator or memory location
DAA	0	DAA	0x19	2	25	INHERENT	DAA	1	-	Decimal Adjust A	-aa0a	Decimal adjust A accumulator
EXG	0	EXG	0x1e	8	30	IMMEDIATE	EXG	2	byte	exchange R1,R2	ccccc	Exchange Rl with R2
TFR	0	TFR	0x1f	7	31	IMMEDIATE	TFR	2	byte	Transfer R1 to R2	ccccc	Transfer R1 to R2
MUL	0	MUL	0x3d	11	61	INHERENT	MUL	1	-	D = A*B (Unsigned)	--a-a	Unsigned multiply (A * B ? D)
NEGA	0	NEG	0x40	2	64	INHERENT	NEG	1	-	A = !A + 1	uaaaa	Negate accumulator or memory
COMA	0	COM	0x43	2	67	INHERENT	COM	1	-	A = complement(A)	-aa01	Complement accumulator or memory location
LSRA	0	LSR	0x44	2	68	INHERENT	LSR	1	-	Logical shift A right	-0a-s	Logical shift right accumulator or memory location
RORA	0	ROR	0x46	2	70	INHERENT	ROR	1	-	Rotate A Right thru carry	-aa-s	Rotate accumulator or memory right
ASRA	0	ASR	0x47	2	71	INHERENT	ASR	1	-	Arithmetic shift A right	uaa-s	Arithmetic shift of accumulator or memory right
LSLA/ASLA	0	LSL	0x48	2	72	INHERENT	LSL	1	-	Logical shift A left	naaas	Logical shift left accumulator or memory location
ROLA	0	ROL	0x49	2	73	INHERENT	ROL	1	-	Rotate A left thru carry	-aaas	Rotate accumulator or memory left
DECA	0	DEC	0x4a	2	74	INHERENT	DEC	1	-	A = A  1	-aaa-	Decrement accumulator or memory location
INCA	0	INC	0x4c	2	76	INHERENT	INC	1	-	A = A + 1	-aaa-	Increment accumulator or memory location
TSTA	0	TST	0x4d	2	77	INHERENT	TST	1	-	Test A	-aa0-	Test accumulator or memory location
CLRA	0	CLR	0x4f	2	79	INHERENT	CLR	1	-	A = 0	-0100	Clear accumulator or memory location
NEGB	0	NEG	0x50	2	80	INHERENT	NEG	1	-	B = !B + 1	uaaaa	Negate accumulator or memory
COMB	0	COM	0x53	2	83	INHERENT	COM	1	-	B = complement(B)	-aa01	Complement accumulator or memory location
LSRB	0	LSR	0x54	2	84	INHERENT	LSR	1	-	Logical shift B right	-0a-s	Logical shift right accumulator or memory location
RORB	0	ROR	0x56	2	86	INHERENT	ROR	1	-	Rotate B Right thru carry	-aa-s	Rotate accumulator or memory right
ASRB	0	ASR	0x57	2	87	INHERENT	ASR	1	-	Arithmetic shift B right	uaa-s	Arithmetic shift of accumulator or memory right
LSLB/ASLB	0	LSL	0x58	2	88	INHERENT	LSL	1	-	Logical shift B left	naaas	Logical shift left accumulator or memory location
ROLB	0	ROL	0x59	2	89	INHERENT	ROL	1	-	Rotate B left thru carry	-aaas	Rotate accumulator or memory left
DECB	0	DEC	0x5a	2	90	INHERENT	DEC	1	-	B = B  1	-aaa-	Decrement accumulator or memory location
INCB	0	INC	0x5c	2	92	INHERENT	INC	1	-	B = B + 1	-aaa-	Increment accumulator or memory location
TSTB	0	TST	0x5d	2	93	INHERENT	TST	1	-	Test B	-aa0-	Test accumulator or memory location
CLRB	0	CLR	0x5f	2	95	INHERENT	CLR	1	-	B = 0	-0100	Clear accumulator or memory location
NEG	0	NEG	0x60	6	96	INDEXED	NEG	2	byte	M = !M + 1	uaaaa	Negate accumulator or memory
COM	0	COM	0x63	6	99	INDEXED	COM	2	byte	M = complement(M)	-aa01	Complement accumulator or memory location
LSR	0	LSR	0x64	6	100	INDEXED	LSR	2	byte	Logical shift M right	-0a-s	Logical shift right accumulator or memory location
ROR	0	ROR	0x66	6	102	INDEXED	ROR	2	byte	Rotate M Right thru carry	-aa-s	Rotate accumulator or memory right
ASR	0	ASR	0x67	6	103	INDEXED	ASR	2	byte	Arithmetic shift M right	uaa-s	Arithmetic shift of accumulator or memory right
LSL/ASL	0	LSL	0x68	6	104	INDEXED	LSL	2	byte	Logical shift M left	naaas	Logical shift left accumulator or memory location
ROL	0	ROL	0x69	6	105	INDEXED	ROL	2	byte	Rotate M left thru carry	-aaas	Rotate accumulator or memory left
DEC	0	DEC	0x6a	6	106	INDEXED	DEC	2	byte	M = M  1	-aaa-	Decrement accumulator or memory location
INC	0	INC	0x6c	6	108	INDEXED	INC	2	byte	M = M + 1	-aaa-	Increment accumulator or memory location
TST	0	TST	0x6d	6	109	INDEXED	TST	2	byte	Test M	-aa0-	Test accumulator or memory location
CLR	0	CLR	0x6f	6	111	INDEXED	CLR	2	byte	M = 0	-0100	Clear accumulator or memory location
NEG	0	NEG	0x70	7	112	EXTENDED	NEG	3	byte	M = !M + 1	uaaaa	Negate accumulator or memory
COM	0	COM	0x73	7	115	EXTENDED	COM	3	byte	M = complement(M)	-aa01	Complement accumulator or memory location
LSR	0	LSR	0x74	7	116	EXTENDED	LSR	3	byte	Logical shift M right	-0a-s	Logical shift right accumulator or memory location
ROR	0	ROR	0x76	7	118	EXTENDED	ROR	3	byte	Rotate M Right thru carry	-aa-s	Rotate accumulator or memory right
ASR	0	ASR	0x77	7	119	EXTENDED	ASR	3	byte	Arithmetic shift M right	uaa-s	Arithmetic shift of accumulator or memory right
LSL/ASL	0	LSL	0x78	7	120	EXTENDED	LSL	3	byte	Logical shift M left	naaas	Logical shift left accumulator or memory location
ROL	0	ROL	0x79	7	121	EXTENDED	ROL	3	byte	Rotate M left thru carry	-aaas	Rotate accumulator or memory left
DEC	0	DEC	0x7a	7	122	EXTENDED	DEC	3	byte	M = M  1	-aaa-	Decrement accumulator or memory location
INC	0	INC	0x7c	7	124	EXTENDED	INC	3	byte	M = M + 1	-aaa-	Increment accumulator or memory location
TST	0	TST	0x7d	7	125	EXTENDED	TST	3	byte	Test M	-aa0-	Test accumulator or memory location
CLR	0	CLR	0x7f	7	127	EXTENDED	CLR	3	byte	M = 0	-0100	Clear accumulator or memory location
SUBA	0	SUB8	0x80	2	128	IMMEDIATE	SUB	2	byte	A = A - M	uaaaa	Subtract memory from accumulator
CMPA	0	CMP8	0x81	2	129	IMMEDIATE	CMP	2	byte	Compare M from A	uaaaa	Compare memory from accumulator
SBCA	0	SBC	0x82	2	130	IMMEDIATE	SBC	2	byte	A = A - M - C	uaaaa	Subtract memory from accumulator with borrow
ANDA	0	AND	0x84	2	132	IMMEDIATE	AND	2	byte	A = A && M	-aa0-	AND memory with accumulator
BITA	0	BIT	0x85	2	133	IMMEDIATE	BIT	2	byte	Bit Test A (M&&A)	-aa0-	Bit test memory with accumulator
LDA	0	LD8	0x86	2	134	IMMEDIATE	LD	2	byte	A = M	-aa0-	Load accumulator from memory
EORA	0	EOR	0x88	2	136	IMMEDIATE	EOR	2	byte	A = A XOR M	-aa0-	Exclusive OR memory with accumulator
ADCA	0	ADC	0x89	2	137	IMMEDIATE	ADC	2	byte	A = A+M+C	aaaaa	Add memory to accumulator with carry
ORA	0	OR	0x8a	2	138	IMMEDIATE	OR	2	byte	|A = A |||| M|	-aa0-	OR memory with accumulator
ADDA	0	ADD8	0x8b	2	139	IMMEDIATE	ADD	2	byte	A = A+M	aaaaa	Add memory to accumulator
SUBA	0	SUB8	0x90	4	144	DIRECT	SUB	2	byte	A = A - M	uaaaa	Subtract memory from accumulator
CMPA	0	CMP8	0x91	4	145	DIRECT	CMP	2	byte	Compare M from A	uaaaa	Compare memory from accumulator
SBCA	0	SBC	0x92	4	146	DIRECT	SBC	2	byte	A = A - M - C	uaaaa	Subtract memory from accumulator with borrow
ANDA	0	AND	0x94	4	148	DIRECT	AND	2	byte	A = A && M	-aa0-	AND memory with accumulator
BITA	0	BIT	0x95	4	149	DIRECT	BIT	2	byte	Bit Test A (M&&A)	-aa0-	Bit test memory with accumulator
LDA	0	LD8	0x96	4	150	DIRECT	LD	2	byte	A = M	-aa0-	Load accumulator from memory
STA	0	ST8	0x97	4	151	DIRECT	ST	2	byte	M = A	-aa0-	Store accumulator to memroy
EORA	0	EOR	0x98	4	152	DIRECT	EOR	2	byte	A = A XOR M	-aa0-	Exclusive OR memory with accumulator
ADCA	0	ADC	0x99	4	153	DIRECT	ADC	2	byte	A = A+M+C	aaaaa	Add memory to accumulator with carry
ORA	0	OR	0x9a	4	154	DIRECT	OR	2	byte	|A = A |||| M|	-aa0-	OR memory with accumulator
ADDA	0	ADD8	0x9b	4	155	DIRECT	ADD	2	byte	A = A+M	aaaaa	Add memory to accumulator
SUBA	0	SUB8	0xa0	4	160	INDEXED	SUB	2	byte	A = A - M	uaaaa	Subtract memory from accumulator
CMPA	0	CMP8	0xa1	4	161	INDEXED	CMP	2	byte	Compare M from A	uaaaa	Compare memory from accumulator
SBCA	0	SBC	0xa2	4	162	INDEXED	SBC	2	byte	A = A - M - C	uaaaa	Subtract memory from accumulator with borrow
ANDA	0	AND	0xa4	4	164	INDEXED	AND	2	byte	A = A && M	-aa0-	AND memory with accumulator
BITA	0	BIT	0xa5	4	165	INDEXED	BIT	2	byte	Bit Test A (M&&A)	-aa0-	Bit test memory with accumulator
LDA	0	LD8	0xa6	4	166	INDEXED	LD	2	byte	A = M	-aa0-	Load accumulator from memory
STA	0	ST8	0xa7	4	167	INDEXED	ST	2	byte	M = A	-aa0-	Store accumulator to memroy
EORA	0	EOR	0xa8	4	168	INDEXED	EOR	2	byte	A = A XOR M	-aa0-	Exclusive OR memory with accumulator
ADCA	0	ADC	0xa9	4	169	INDEXED	ADC	2	byte	A = A+M+C	aaaaa	Add memory to accumulator with carry
ORA	0	OR	0xaa	4	170	INDEXED	OR	2	byte	|A = A |||| M|	-aa0-	OR memory with accumulator
ADDA	0	ADD8	0xab	4	171	INDEXED	ADD	2	byte	A = A+M	aaaaa	Add memory to accumulator
SUBA	0	SUB8	0xb0	5	176	EXTENDED	SUB	3	byte	A = A - M	uaaaa	Subtract memory from accumulator
CMPA	0	CMP8	0xb1	5	177	EXTENDED	CMP	3	byte	Compare M from A	uaaaa	Compare memory from accumulator
SBCA	0	SBC	0xb2	5	178	EXTENDED	SBC	3	byte	A = A - M - C	uaaaa	Subtract memory from accumulator with borrow
ANDA	0	AND	0xb4	5	180	EXTENDED	AND	3	byte	A = A && M	-aa0-	AND memory with accumulator
BITA	0	BIT	0xb5	5	181	EXTENDED	BIT	3	byte	Bit Test A (M&&A)	-aa0-	Bit test memory with accumulator
LDA	0	LD8	0xb6	5	182	EXTENDED	LD	3	byte	A = M	-aa0-	Load accumulator from memory
STA	0	ST8	0xb7	5	183	EXTENDED	ST	3	byte	M = A	-aa0-	Store accumulator to memroy
EORA	0	EOR	0xb8	5	184	EXTENDED	EOR	3	byte	A = A XOR M	-aa0-	Exclusive OR memory with accumulator
ADCA	0	ADC	0xb9	5	185	EXTENDED	ADC	3	byte	A = A+M+C	aaaaa	Add memory to accumulator with carry
ORA	0	OR	0xba	5	186	EXTENDED	OR	3	byte	|A = A |||| M|	-aa0-	OR memory with accumulator
ADDA	0	ADD8	0xbb	5	187	EXTENDED	ADD	3	byte	A = A+M	aaaaa	Add memory to accumulator
SUBB	0	SUB8	0xc0	2	192	IMMEDIATE	SUB	2	byte	B = B - M	uaaaa	Subtract memory from accumulator
CMPB	0	CMP8	0xc1	2	193	IMMEDIATE	CMP	2	byte	Compare M from B	uaaaa	Compare memory from accumulator
SBCB	0	SBC	0xc2	2	194	IMMEDIATE	SBC	2	byte	B = B - M - C	uaaaa	Subtract memory from accumulator with borrow
ANDB	0	AND	0xc4	2	196	IMMEDIATE	AND	2	byte	B = B && M	-aa0-	AND memory with accumulator
BITB	0	BIT	0xc5	2	197	IMMEDIATE	BIT	2	byte	Bit Test B (M&&B)	-aa0-	Bit test memory with accumulator
LDB	0	LD8	0xc6	2	198	IMMEDIATE	LD	2	byte	B = M	-aa0-	Load accumulator from memory
EORB	0	EOR	0xc8	2	200	IMMEDIATE	EOR	2	byte	B = M XOR B	-aa0-	Exclusive OR memory with accumulator
ADCB	0	ADC	0xc9	2	201	IMMEDIATE	ADC	2	byte	B = B+M+C	aaaaa	Add memory to accumulator with carry
ORB	0	OR	0xca	2	202	IMMEDIATE	OR	2	byte	|B = B |||| M|	-aa0-	OR memory with accumulator
ADDB	0	ADD8	0xcb	2	203	IMMEDIATE	ADD	2	byte	B = B+M	aaaaa	Add memory to accumulator
SUBB	0	SUB8	0xd0	4	208	DIRECT	SUB	2	byte	B = B - M	uaaaa	Subtract memory from accumulator
CMPB	0	CMP8	0xd1	4	209	DIRECT	CMP	2	byte	Compare M from B	uaaaa	Compare memory from accumulator
SBCB	0	SBC	0xd2	4	210	DIRECT	SBC	2	byte	B = B - M - C	uaaaa	Subtract memory from accumulator with borrow
ANDB	0	AND	0xd4	4	212	DIRECT	AND	2	byte	B = B && M	-aa0-	AND memory with accumulator
BITB	0	BIT	0xd5	4	213	DIRECT	BIT	2	byte	Bit Test B (M&&B)	-aa0-	Bit test memory with accumulator
LDB	0	LD8	0xd6	4	214	DIRECT	LD	2	byte	B = M	-aa0-	Load accumulator from memory
STB	0	ST8	0xd7	4	215	DIRECT	ST	2	byte	M = B	-aa0-	Store accumulator to memroy
EORB	0	EOR	0xd8	4	216	DIRECT	EOR	2	byte	B = M XOR B	-aa0-	Exclusive OR memory with accumulator
ADCB	0	ADC	0xd9	4	217	DIRECT	ADC	2	byte	B = B+M+C	aaaaa	Add memory to accumulator with carry
ORB	0	OR	0xda	4	218	DIRECT	OR	2	byte	|B = B |||| M|	-aa0-	OR memory with accumulator
ADDB	0	ADD8	0xdb	4	219	DIRECT	ADD	2	byte	B = B+M	aaaaa	Add memory to accumulator
SUBB	0	SUB8	0xe0	4	224	INDEXED	SUB	2	byte	B = B - M	uaaaa	Subtract memory from accumulator
CMPB	0	CMP8	0xe1	4	225	INDEXED	CMP	2	byte	Compare M from B	uaaaa	Compare memory from accumulator
SBCB	0	SBC	0xe2	4	226	INDEXED	SBC	2	byte	B = B - M - C	uaaaa	Subtract memory from accumulator with borrow
ANDB	0	AND	0xe4	4	228	INDEXED	AND	2	byte	B = B && M	-aa0-	AND memory with accumulator
BITB	0	BIT	0xe5	4	229	INDEXED	BIT	2	byte	Bit Test B (M&&B)	-aa0-	Bit test memory with accumulator
LDB	0	LD8	0xe6	4	230	INDEXED	LD	2	byte	B = M	-aa0-	Load accumulator from memory
STB	0	ST8	0xe7	4	231	INDEXED	ST	2	byte	M = B	-aa0-	Store accumulator to memroy
EORB	0	EOR	0xe8	4	232	INDEXED	EOR	2	byte	B = M XOR B	-aa0-	Exclusive OR memory with accumulator
ADCB	0	ADC	0xe9	4	233	INDEXED	ADC	2	byte	B = B+M+C	aaaaa	Add memory to accumulator with carry
ORB	0	OR	0xea	4	234	INDEXED	OR	2	byte	|B = B |||| M|	-aa0-	OR memory with accumulator
ADDB	0	ADD8	0xeb	4	235	INDEXED	ADD	2	byte	B = B+M	aaaaa	Add memory to accumulator
SUBB	0	SUB8	0xf0	5	240	EXTENDED	SUB	3	byte	B = B - M	uaaaa	Subtract memory from accumulator
CMPB	0	CMP8	0xf1	5	241	EXTENDED	CMP	3	byte	Compare M from B	uaaaa	Compare memory from accumulator
SBCB	0	SBC	0xf2	5	242	EXTENDED	SBC	3	byte	B = B - M - C	uaaaa	Subtract memory from accumulator with borrow
ANDB	0	AND	0xf4	5	244	EXTENDED	AND	3	byte	B = B && M	-aa0-	AND memory with accumulator
BITB	0	BIT	0xf5	5	245	EXTENDED	BIT	3	byte	Bit Test B (M&&B)	-aa0-	Bit test memory with accumulator
LDB	0	LD8	0xf6	5	246	EXTENDED	LD	3	byte	B = M	-aa0-	Load accumulator from memory
STB	0	ST8	0xf7	5	247	EXTENDED	ST	3	byte	M = B	-aa0-	Store accumulator to memroy
EORB	0	EOR	0xf8	5	248	EXTENDED	EOR	3	byte	B = M XOR B	-aa0-	Exclusive OR memory with accumulator
ADCB	0	ADC	0xf9	5	249	EXTENDED	ADC	3	byte	B = B+M+C	aaaaa	Add memory to accumulator with carry
ORB	0	OR	0xfa	5	250	EXTENDED	OR	3	byte	|B = B |||| M|	-aa0-	OR memory with accumulator
ADDB	0	ADD8	0xfb	5	251	EXTENDED	ADD	3	byte	B = B+M	aaaaa	Add memory to accumulator
SEX	1	SEX	0x1d	2	29	INHERENT	SEX	1	-	Sign extend B into A	-aa0-	Sign Extend B accumulator into A accumulator
SUBD	1	SUB16	0x83	4	131	IMMEDIATE	SUB	3	word	D = D - M:M+1	-aaaa	Subtract memory from D accumulator
SUBD	1	SUB16	0x93	6	147	DIRECT	SUB	2	word	D = D - M:M+1	-aaaa	Subtract memory from D accumulator
SUBD	1	SUB16	0xa3	6	163	INDEXED	SUB	2	word	D = D - M:M+1	-aaaa	Subtract memory from D accumulator
SUBD	1	SUB16	0xb3	7	179	EXTENDED	SUB	3	word	D = D - M:M+1	-aaaa	Subtract memory from D accumulator
ADDD	1	ADD16	0xc3	4	195	IMMEDIATE	ADD	3	word	D = D+M:M+1	-aaaa	Add memory to D accumulator
LDD	1	LD16	0xcc	3	204	IMMEDIATE	LD	3	word	D = M:M+1	-aa0-	Load stack pointer from memory
ADDD	1	ADD16	0xd3	6	211	DIRECT	ADD	2	word	D = D+M:M+1	-aaaa	Add memory to D accumulator
LDD	1	LD16	0xdc	5	220	DIRECT	LD	2	word	D = M:M+1	-aa0-	Load stack pointer from memory
STD	1	ST16	0xdd	5	221	DIRECT	ST	2	word	M:M+1 = D	-aa0-	Store stack pointer to memory
ADDD	1	ADD16	0xe3	6	227	INDEXED	ADD	2	word	D = D+M:M+1	-aaaa	Add memory to D accumulator
LDD	1	LD16	0xec	5	236	INDEXED	LD	2	word	D = M:M+1	-aa0-	Load stack pointer from memory
STD	1	ST16	0xed	5	237	INDEXED	ST	2	word	M:M+1 = D	-aa0-	Store stack pointer to memory
ADDD	1	ADD16	0xf3	7	243	EXTENDED	ADD	3	word	D = D+M:M+1	-aaaa	Add memory to D accumulator
LDD	1	LD16	0xfc	6	252	EXTENDED	LD	3	word	D = M:M+1	-aa0-	Load stack pointer from memory
STD	1	ST16	0xfd	6	253	EXTENDED	ST	3	word	M:M+1 = D	-aa0-	Store stack pointer to memory
CMPD	1	CMP16	0x1083	5	4227	IMMEDIATE	CMP	4	word	Compare M:M+1 from D	-aaaa	Compare memory from stack pointer
CMPD	1	CMP16	0x1093	7	4243	DIRECT	CMP	3	word	Compare M:M+1 from D	-aaaa	Compare memory from stack pointer
CMPD	1	CMP16	0x10a3	7	4259	INDEXED	CMP	3	word	Compare M:M+1 from D	-aaaa	Compare memory from stack pointer
CMPD	1	CMP16	0x10b3	8	4275	EXTENDED	CMP	4	word	Compare M:M+1 from D	-aaaa	Compare memory from stack pointer
LEAX	2	LEA_register	0x30	4	48	INDEXED	LEA	2	-	X = EA	-----	Load effective address into stack pointer
LEAY	2	LEA_register	0x31	4	49	INDEXED	LEA	2	-	Y = EA	-----	Load effective address into stack pointer
LEAS	2	LEA_pointer	0x32	4	50	INDEXED	LEA	2	-	S = EA	-----	Load effective address into stack pointer
LEAU	2	LEA_pointer	0x33	4	51	INDEXED	LEA	2	-	U = EA	-----	Load effective address into stack pointer
PSHS	2	PSHS	0x34	5	52	IMMEDIATE	PSH	2	word	S -= 1: MEM(S) = R; Push Register on S Stack	-----	Push A, B, CC, DP, D, X, Y, U, or PC onto hardware stack
PULS	2	PULS	0x35	5	53	IMMEDIATE	PUL	2	word	R=MEM(S) : S += 1; Pull register from S Stack	ccccc	Pull A, B, CC, DP, D, X, Y, U, or PC from hardware stack
PSHU	2	PSHU	0x36	5	54	IMMEDIATE	PSH	2	word	U -= 1: MEM(U) = R; Push Register on U Stack	-----	Push A, B, CC, DP, D, X, Y, S, or PC onto user stack
PULU	2	PULU	0x37	5	55	IMMEDIATE	PUL	2	word	R=MEM(U) : U += 1; Pull register from U Stack	ccccc	Pull A, B, CC, DP, D, X, Y, S, or PC from hardware stack
ABX	2	ABX	0x3a	3	58	INHERENT	ABX	1	-	X = B+X (Unsigned)	-----	Add B accumulator to X (unsigned)
CMPX	2	CMP16	0x8c	4	140	IMMEDIATE	CMP	3	word	Compare M:M+1 from X	-aaaa	Compare memory from stack pointer
LDX	2	LD16	0x8e	3	142	IMMEDIATE	LD	3	word	X = M:M+1	-aa0-	Load stack pointer from memory
CMPX	2	CMP16	0x9c	6	156	DIRECT	CMP	2	word	Compare M:M+1 from X	-aaaa	Compare memory from stack pointer
LDX	2	LD16	0x9e	5	158	DIRECT	LD	2	word	X = M:M+1	-aa0-	Load stack pointer from memory
STX	2	ST16	0x9f	5	159	DIRECT	ST	2	word	M:M+1 = X	-aa0-	Store stack pointer to memory
CMPX	2	CMP16	0xac	6	172	INDEXED	CMP	2	word	Compare M:M+1 from X	-aaaa	Compare memory from stack pointer
LDX	2	LD16	0xae	5	174	INDEXED	LD	2	word	X = M:M+1	-aa0-	Load stack pointer from memory
STX	2	ST16	0xaf	5	175	INDEXED	ST	2	word	M:M+1 = X	-aa0-	Store stack pointer to memory
CMPX	2	CMP16	0xbc	7	188	EXTENDED	CMP	3	word	Compare M:M+1 from X	-aaaa	Compare memory from stack pointer
LDX	2	LD16	0xbe	6	190	EXTENDED	LD	3	word	X = M:M+1	-aa0-	Load stack pointer from memory
STX	2	ST16	0xbf	6	191	EXTENDED	ST	3	word	M:M+1 = X	-aa0-	Store stack pointer to memory
LDU	2	LD16	0xce	3	206	IMMEDIATE	LD	3	word	U = M:M+1	-aa0-	Load stack pointer from memory
LDU	2	LD16	0xde	5	222	DIRECT	LD	2	word	U = M:M+1	-aa0-	Load stack pointer from memory
STU	2	ST16	0xdf	5	223	DIRECT	ST	2	word	M:M+1 = U	-aa0-	Store stack pointer to memory
LDU	2	LD16	0xee	5	238	INDEXED	LD	2	word	U = M:M+1	-aa0-	Load stack pointer from memory
STU	2	ST16	0xef	5	239	INDEXED	ST	2	word	M:M+1 = U	-aa0-	Store stack pointer to memory
LDU	2	LD16	0xfe	6	254	EXTENDED	LD	3	word	U = M:M+1	-aa0-	Load stack pointer from memory
STU	2	ST16	0xff	6	255	EXTENDED	ST	3	word	M:M+1 = U	-aa0-	Store stack pointer to memory
CMPY	2	CMP16	0x108c	5	4236	IMMEDIATE	CMP	4	word	Compare M:M+1 from Y	-aaaa	Compare memory from stack pointer
LDY	2	LD16	0x108e	4	4238	IMMEDIATE	LD	4	word	Y = M:M+1	-aa0-	Load stack pointer from memory
CMPY	2	CMP16	0x109c	7	4252	DIRECT	CMP	3	word	Compare M:M+1 from Y	-aaaa	Compare memory from stack pointer
LDY	2	LD16	0x109e	6	4254	DIRECT	LD	3	word	Y = M:M+1	-aa0-	Load stack pointer from memory
STY	2	ST16	0x109f	6	4255	DIRECT	ST	3	word	M:M+1 = Y	-aa0-	Store stack pointer to memory
CMPY	2	CMP16	0x10ac	7	4268	INDEXED	CMP	3	word	Compare M:M+1 from Y	-aaaa	Compare memory from stack pointer
LDY	2	LD16	0x10ae	6	4270	INDEXED	LD	3	word	Y = M:M+1	-aa0-	Load stack pointer from memory
STY	2	ST16	0x10af	6	4271	INDEXED	ST	3	word	M:M+1 = Y	-aa0-	Store stack pointer to memory
CMPY	2	CMP16	0x10bc	8	4284	EXTENDED	CMP	4	word	Compare M:M+1 from Y	-aaaa	Compare memory from stack pointer
LDY	2	LD16	0x10be	7	4286	EXTENDED	LD	4	word	Y = M:M+1	-aa0-	Load stack pointer from memory
STY	2	ST16	0x10bf	7	4287	EXTENDED	ST	4	word	M:M+1 = Y	-aa0-	Store stack pointer to memory
LDS	2	LD16	0x10ce	4	4302	IMMEDIATE	LD	4	word	S = M:M+1	-aa0-	Load stack pointer from memory
LDS	2	LD16	0x10de	6	4318	DIRECT	LD	3	word	S = M:M+1	-aa0-	Load stack pointer from memory
STS	2	ST16	0x10df	6	4319	DIRECT	ST	3	word	M:M+1 = S	-aa0-	Store stack pointer to memory
LDS	2	LD16	0x10ee	6	4334	INDEXED	LD	3	word	S = M:M+1	-aa0-	Load stack pointer from memory
STS	2	ST16	0x10ef	6	4335	INDEXED	ST	3	word	M:M+1 = S	-aa0-	Store stack pointer to memory
LDS	2	LD16	0x10fe	7	4350	EXTENDED	LD	4	word	S = M:M+1	-aa0-	Load stack pointer from memory
STS	2	ST16	0x10ff	7	4351	EXTENDED	ST	4	word	M:M+1 = S	-aa0-	Store stack pointer to memory
CMPU	2	CMP16	0x1183	5	4483	IMMEDIATE	CMP	4	word	Compare M:M+1 from U	-aaaa	Compare memory from stack pointer
CMPS	2	CMP16	0x118c	5	4492	IMMEDIATE	CMP	4	word	Compare M:M+1 from S	-aaaa	Compare memory from stack pointer
CMPU	2	CMP16	0x1193	7	4499	DIRECT	CMP	3	word	Compare M:M+1 from U	-aaaa	Compare memory from stack pointer
CMPS	2	CMP16	0x119c	7	4508	DIRECT	CMP	3	word	Compare M:M+1 from S	-aaaa	Compare memory from stack pointer
CMPU	2	CMP16	0x11a3	7	4515	INDEXED	CMP	3	word	Compare M:M+1 from U	-aaaa	Compare memory from stack pointer
CMPS	2	CMP16	0x11ac	7	4524	INDEXED	CMP	3	word	Compare M:M+1 from S	-aaaa	Compare memory from stack pointer
CMPU	2	CMP16	0x11b3	8	4531	EXTENDED	CMP	4	word	Compare M:M+1 from U	-aaaa	Compare memory from stack pointer
CMPS	2	CMP16	0x11bc	8	4540	EXTENDED	CMP	4	word	Compare M:M+1 from S	-aaaa	Compare memory from stack pointer
BPL	3	BPL	0x2a	3	42	RELATIVE	BPL	2	byte	Branch if plus	-----	Branch if plus
BMI	3	BMI	0x2b	3	43	RELATIVE	BMI	2	byte	Branch if minus	-----	Branch if minus
LBPL	3	BPL	0x102a	5	4138	RELATIVE	LBPL	4	byte	Branch if plus	-----	Branch if plus
LBMI	3	BMI	0x102b	5	4139	RELATIVE	LBMI	4	byte	Branch if minus	-----	Branch if minus
BVC	4	BVC	0x28	3	40	RELATIVE	BVC	2	byte	Branch if valid twos complement result	-----	Branch if valid twos complement result
BVS	4	BVS	0x29	3	41	RELATIVE	BVS	2	byte	Branch if invalid twos complement result	-----	Branch if invalid twos complement result
BGE	4	BGE	0x2c	3	44	RELATIVE	BGE	2	byte	Branch if greater than or equal (signed)	-----	Branch if greater than or equal (signed)
BLT	4	BLT	0x2d	3	45	RELATIVE	BLT	2	byte	Branch if less than (signed)	-----	Branch if less than (signed)
BGT	4	BGT	0x2e	3	46	RELATIVE	BGT	2	byte	Branch if greater (signed)	-----	Branch if greater (signed)
BLE	4	BLE	0x2f	3	47	RELATIVE	BLE	2	byte	Branch if less than or equal (signed)	-----	Branch if less than or equal (signed)
LBVC	4	BVC	0x1028	5	4136	RELATIVE	LBVC	4	byte	Branch if valid twos complement result	-----	Branch if valid twos complement result
LBVS	4	BVS	0x1029	5	4137	RELATIVE	LBVS	4	byte	Branch if invalid twos complement result	-----	Branch if invalid twos complement result
LBGE	4	BGE	0x102c	5	4140	RELATIVE	LBGE	4	byte	Branch if greater than or equal (signed)	-----	Branch if greater than or equal (signed)
LBLT	4	BLT	0x102d	5	4141	RELATIVE	LBLT	4	byte	Branch if less than (signed)	-----	Branch if less than (signed)
LBGT	4	BGT	0x102e	5	4142	RELATIVE	LBGT	4	byte	Branch if greater (signed)	-----	Branch if greater (signed)
LBLE	4	BLE	0x102f	5	4143	RELATIVE	LBLE	4	byte	Branch if less than or equal (signed)	-----	Branch if less than or equal (signed)
BHI	5	BHI	0x22	3	34	RELATIVE	BHI	2	byte	Branch if higher (unsigned)	-----	Branch if higher (unsigned)
BLS	5	BLS	0x23	3	35	RELATIVE	BLS	2	byte	Branch if lower or same (unsigned)	-----	Branch if lower or same (unsigned)
BHS/BCC	5	OTHER_INSTRUCTIONS	0x24	3	36	RELATIVE	BHS/BCC	2	-	Branch if higher or same (unsigned)	-----	Branch if lower (unsigned)
BLO/BCS	5	OTHER_INSTRUCTIONS	0x25	3	37	RELATIVE	BLO/BCS	2	-	Branch if lower (unsigned)	-----	Branch if lower (unsigned)
BNE	5	BNE	0x26	3	38	RELATIVE	BNE	2	byte	Branch if not equal	-----	Branch if not equal
BEQ	5	BEQ	0x27	3	39	RELATIVE	BEQ	2	byte	Branch if equal	-----	Branch if equal
LBHI	5	BHI	0x1022	5	4130	RELATIVE	LBHI	4	byte	Branch if higher (unsigned)	-----	Branch if higher (unsigned)
LBLS	5	BLS	0x1023	5	4131	RELATIVE	LBLS	4	byte	Branch if lower or same (unsigned)	-----	Branch if lower or same (unsigned)
LBHS/LBCC	5	OTHER_INSTRUCTIONS	0x1024	5	4132	RELATIVE	LBHS/LBCC	4	-	Branch if higher or same (unsigned)	-----	Branch if lower (unsigned)
LBLO/LBCS	5	OTHER_INSTRUCTIONS	0x1025	5	4133	RELATIVE	LBLO/LBCS	4	-	Branch if lower (unsigned)	-----	Branch if lower (unsigned)
LBNE	5	BNE	0x1026	5	4134	RELATIVE	LBNE	4	byte	Branch if not equal	-----	Branch if not equal
LBEQ	5	BEQ	0x1027	5	4135	RELATIVE	LBEQ	4	byte	Branch if equal	-----	Branch if equal
LBRA	6	BRA	0x16	5	22	RELATIVE	LBRA	3	byte	Branch always	-----	Branch always
LBSR	6	BSR	0x17	9	23	RELATIVE	LBSR	3	byte	Branch to subroutine	-----	Branch to subroutine
BRA	6	BRA	0x20	3	32	RELATIVE	BRA	2	byte	Branch always	-----	Branch always
BRN	6	BRN	0x21	3	33	RELATIVE	BRN	2	byte	Branch never	-----	Branch never
BSR	6	BSR	0x8d	7	141	RELATIVE	BSR	2	byte	Branch to subroutine	-----	Branch to subroutine
LBRN	6	BRN	0x1021	5	4129	RELATIVE	LBRN	4	byte	Branch never	-----	Branch never
JMP	7	JMP	0xe	3	14	DIRECT	JMP	2	-	pc = EA	-----	Jump
NOP	7	NOP	0x12	2	18	INHERENT	NOP	1	-	No Operation	-----	No operation
SYNC	7	SYNC	0x13	2	19	INHERENT	SYNC	1	-	Synchronize to Interrupt	-----	Synchronize with interrupt line
ORCC	7	ORCC	0x1a	3	26	IMMEDIATE	OR	2	byte	|C = CC |||| IMM|	ddddd	OR condition code register
ANDCC	7	ANDCC	0x1c	3	28	IMMEDIATE	AND	2	byte	C = CC && IMM	ddddd	AND condition code register
RTS	7	RTS	0x39	5	57	INHERENT	RTS	1	-	Return from subroutine	-----	Return from subroutine
RTI	7	RTI	0x3b	6	59	INHERENT	RTI	1	-	Return from Interrupt	-----	Return from interrupt
CWAI	7	CWAI	0x3c	21	60	IMMEDIATE	CWAI	2	byte	CC = CC ^ IMM; (Wait for Interrupt)	ddddd	AND condition code register, then wait for interrupt
SWI	7	SWI	0x3f	19	63	INHERENT	SWI	1	-	Software interrupt 1	-----	Software interrupt (absolute indirect)
JMP	7	JMP	0x6e	3	110	INDEXED	JMP	2	-	pc = EA	-----	Jump
JMP	7	JMP	0x7e	3	126	EXTENDED	JMP	3	-	pc = EA	-----	Jump
JSR	7	JSR	0x9d	7	157	DIRECT	JSR	2	-	jump to subroutine	-----	Jump to subroutine
JSR	7	JSR	0xad	7	173	INDEXED	JSR	2	-	jump to subroutine	-----	Jump to subroutine
JSR	7	JSR	0xbd	8	189	EXTENDED	JSR	3	-	jump to subroutine	-----	Jump to subroutine
SWI2	7	SWI2	0x103f	20	4159	INHERENT	SWI	2	-	Software interrupt 2	-----	Software interrupt (absolute indirect)
SWI3	7	SWI3	0x113f	20	4415	INHERENT	SWI	2	-	Software interrupt 3	-----	Software interrupt (absolute indirect)
PAGE1+	8	PAGE	0x10	1	16	VARIANT	PAGE	1	-	Page 1 Instructions prefix	+++++	Page 2 Instructions prefix
PAGE2+	8	PAGE	0x11	1	17	VARIANT	PAGE	1	-	Page 2 Instructions prefix	+++++	Page 2 Instructions prefix
RESET	8	RESET	0x3e	-1	62	INHERENT	RESET	1	-		*****	
