instr.	opcode	mnemonic	register	needs ea	read	write	addr.mode	desc
ABX	0x3a	ABX					INHERENT	X = B+X (Unsigned)
ADC	0x99	ADCA	REG_A		BYTE		DIRECT	A = A+M+C
ADC	0xb9	ADCA	REG_A		BYTE		EXTENDED	A = A+M+C
ADC	0x89	ADCA	REG_A		BYTE		IMMEDIATE	A = A+M+C
ADC	0xa9	ADCA	REG_A		BYTE		INDEXED	A = A+M+C
ADC	0xd9	ADCB	REG_B		BYTE		DIRECT	B = B+M+C
ADC	0xf9	ADCB	REG_B		BYTE		EXTENDED	B = B+M+C
ADC	0xc9	ADCB	REG_B		BYTE		IMMEDIATE	B = B+M+C
ADC	0xe9	ADCB	REG_B		BYTE		INDEXED	B = B+M+C
ADD	0x9b	ADDA	REG_A		BYTE		DIRECT	A = A+M
ADD	0xbb	ADDA	REG_A		BYTE		EXTENDED	A = A+M
ADD	0x8b	ADDA	REG_A		BYTE		IMMEDIATE	A = A+M
ADD	0xab	ADDA	REG_A		BYTE		INDEXED	A = A+M
ADD	0xdb	ADDB	REG_B		BYTE		DIRECT	B = B+M
ADD	0xfb	ADDB	REG_B		BYTE		EXTENDED	B = B+M
ADD	0xcb	ADDB	REG_B		BYTE		IMMEDIATE	B = B+M
ADD	0xeb	ADDB	REG_B		BYTE		INDEXED	B = B+M
ADD	0xd3	ADDD	REG_D		WORD		DIRECT_WORD	D = D+M:M+1
ADD	0xf3	ADDD	REG_D		WORD		EXTENDED_WORD	D = D+M:M+1
ADD	0xc3	ADDD	REG_D		WORD		IMMEDIATE_WORD	D = D+M:M+1
ADD	0xe3	ADDD	REG_D		WORD		INDEXED_WORD	D = D+M:M+1
AND	0x94	ANDA	REG_A		BYTE		DIRECT	A = A && M
AND	0xb4	ANDA	REG_A		BYTE		EXTENDED	A = A && M
AND	0x84	ANDA	REG_A		BYTE		IMMEDIATE	A = A && M
AND	0xa4	ANDA	REG_A		BYTE		INDEXED	A = A && M
AND	0xd4	ANDB	REG_B		BYTE		DIRECT	B = B && M
AND	0xf4	ANDB	REG_B		BYTE		EXTENDED	B = B && M
AND	0xc4	ANDB	REG_B		BYTE		IMMEDIATE	B = B && M
AND	0xe4	ANDB	REG_B		BYTE		INDEXED	B = B && M
AND	0x1c	ANDCC	REG_CC		BYTE		IMMEDIATE	C = CC && IMM
ASR	0x7	ASR		yes	BYTE	BYTE	DIRECT	M = Arithmetic shift M right
ASR	0x77	ASR		yes	BYTE	BYTE	EXTENDED	M = Arithmetic shift M right
ASR	0x67	ASR		yes	BYTE	BYTE	INDEXED	M = Arithmetic shift M right
ASR	0x47	ASRA	REG_A				INHERENT	A = Arithmetic shift A right
ASR	0x57	ASRB	REG_B				INHERENT	B = Arithmetic shift B right
BHS	0x24	BCC		yes			RELATIVE	None
BEQ	0x27	BEQ		yes			RELATIVE	None
BGE	0x2c	BGE		yes			RELATIVE	None
BGT	0x2e	BGT		yes			RELATIVE	None
BHI	0x22	BHI		yes			RELATIVE	None
BIT	0x95	BITA	REG_A		BYTE		DIRECT	Bit Test A (M&&A)
BIT	0xb5	BITA	REG_A		BYTE		EXTENDED	Bit Test A (M&&A)
BIT	0x85	BITA	REG_A		BYTE		IMMEDIATE	Bit Test A (M&&A)
BIT	0xa5	BITA	REG_A		BYTE		INDEXED	Bit Test A (M&&A)
BIT	0xd5	BITB	REG_B		BYTE		DIRECT	Bit Test B (M&&B)
BIT	0xf5	BITB	REG_B		BYTE		EXTENDED	Bit Test B (M&&B)
BIT	0xc5	BITB	REG_B		BYTE		IMMEDIATE	Bit Test B (M&&B)
BIT	0xe5	BITB	REG_B		BYTE		INDEXED	Bit Test B (M&&B)
BLE	0x2f	BLE		yes			RELATIVE	None
BLO	0x25	BLO		yes			RELATIVE	None
BLS	0x23	BLS		yes			RELATIVE	None
BLT	0x2d	BLT		yes			RELATIVE	None
BMI	0x2b	BMI		yes			RELATIVE	None
BNE	0x26	BNE		yes			RELATIVE	None
BPL	0x2a	BPL		yes			RELATIVE	None
BRA	0x20	BRA		yes			RELATIVE	None
BRN	0x21	BRN		yes			RELATIVE	None
BSR	0x8d	BSR		yes			RELATIVE	None
BVC	0x28	BVC		yes			RELATIVE	None
BVS	0x29	BVS		yes			RELATIVE	None
CLR	0xf	CLR		yes		BYTE	DIRECT	M = 0
CLR	0x7f	CLR		yes		BYTE	EXTENDED	M = 0
CLR	0x6f	CLR		yes		BYTE	INDEXED	M = 0
CLR	0x4f	CLRA	REG_A				INHERENT	A = 0
CLR	0x5f	CLRB	REG_B				INHERENT	B = 0
CMP	0x91	CMPA	REG_A		BYTE		DIRECT	Compare M from A
CMP	0xb1	CMPA	REG_A		BYTE		EXTENDED	Compare M from A
CMP	0x81	CMPA	REG_A		BYTE		IMMEDIATE	Compare M from A
CMP	0xa1	CMPA	REG_A		BYTE		INDEXED	Compare M from A
CMP	0xd1	CMPB	REG_B		BYTE		DIRECT	Compare M from B
CMP	0xf1	CMPB	REG_B		BYTE		EXTENDED	Compare M from B
CMP	0xc1	CMPB	REG_B		BYTE		IMMEDIATE	Compare M from B
CMP	0xe1	CMPB	REG_B		BYTE		INDEXED	Compare M from B
CMP	0x1093	CMPD	REG_D		WORD		DIRECT_WORD	Compare M:M+1 from D
CMP	0x10b3	CMPD	REG_D		WORD		EXTENDED_WORD	Compare M:M+1 from D
CMP	0x1083	CMPD	REG_D		WORD		IMMEDIATE_WORD	Compare M:M+1 from D
CMP	0x10a3	CMPD	REG_D		WORD		INDEXED_WORD	Compare M:M+1 from D
CMP	0x119c	CMPS	REG_S		WORD		DIRECT_WORD	Compare M:M+1 from S
CMP	0x11bc	CMPS	REG_S		WORD		EXTENDED_WORD	Compare M:M+1 from S
CMP	0x118c	CMPS	REG_S		WORD		IMMEDIATE_WORD	Compare M:M+1 from S
CMP	0x11ac	CMPS	REG_S		WORD		INDEXED_WORD	Compare M:M+1 from S
CMP	0x1193	CMPU	REG_U		WORD		DIRECT_WORD	Compare M:M+1 from U
CMP	0x11b3	CMPU	REG_U		WORD		EXTENDED_WORD	Compare M:M+1 from U
CMP	0x1183	CMPU	REG_U		WORD		IMMEDIATE_WORD	Compare M:M+1 from U
CMP	0x11a3	CMPU	REG_U		WORD		INDEXED_WORD	Compare M:M+1 from U
CMP	0x9c	CMPX	REG_X		WORD		DIRECT_WORD	Compare M:M+1 from X
CMP	0xbc	CMPX	REG_X		WORD		EXTENDED_WORD	Compare M:M+1 from X
CMP	0x8c	CMPX	REG_X		WORD		IMMEDIATE_WORD	Compare M:M+1 from X
CMP	0xac	CMPX	REG_X		WORD		INDEXED_WORD	Compare M:M+1 from X
CMP	0x109c	CMPY	REG_Y		WORD		DIRECT_WORD	Compare M:M+1 from Y
CMP	0x10bc	CMPY	REG_Y		WORD		EXTENDED_WORD	Compare M:M+1 from Y
CMP	0x108c	CMPY	REG_Y		WORD		IMMEDIATE_WORD	Compare M:M+1 from Y
CMP	0x10ac	CMPY	REG_Y		WORD		INDEXED_WORD	Compare M:M+1 from Y
COM	0x3	COM		yes	BYTE	BYTE	DIRECT	M = complement(M)
COM	0x73	COM		yes	BYTE	BYTE	EXTENDED	M = complement(M)
COM	0x63	COM		yes	BYTE	BYTE	INDEXED	M = complement(M)
COM	0x43	COMA	REG_A				INHERENT	A = complement(A)
COM	0x53	COMB	REG_B				INHERENT	B = complement(B)
CWAI	0x3c	CWAI			BYTE		IMMEDIATE	CC = CC ^ IMM; (Wait for Interrupt)
DAA	0x19	DAA					INHERENT	Decimal Adjust A
DEC	0xa	DEC		yes	BYTE	BYTE	DIRECT	M = M  1
DEC	0x7a	DEC		yes	BYTE	BYTE	EXTENDED	M = M  1
DEC	0x6a	DEC		yes	BYTE	BYTE	INDEXED	M = M  1
DEC	0x4a	DECA	REG_A				INHERENT	A = A  1
DEC	0x5a	DECB	REG_B				INHERENT	B = B  1
EOR	0x98	EORA	REG_A		BYTE		DIRECT	A = A XOR M
EOR	0xb8	EORA	REG_A		BYTE		EXTENDED	A = A XOR M
EOR	0x88	EORA	REG_A		BYTE		IMMEDIATE	A = A XOR M
EOR	0xa8	EORA	REG_A		BYTE		INDEXED	A = A XOR M
EOR	0xd8	EORB	REG_B		BYTE		DIRECT	B = M XOR B
EOR	0xf8	EORB	REG_B		BYTE		EXTENDED	B = M XOR B
EOR	0xc8	EORB	REG_B		BYTE		IMMEDIATE	B = M XOR B
EOR	0xe8	EORB	REG_B		BYTE		INDEXED	B = M XOR B
EXG	0x1e	EXG						exchange R1,R2
INC	0xc	INC		yes	BYTE	BYTE	DIRECT	M = M + 1
INC	0x7c	INC		yes	BYTE	BYTE	EXTENDED	M = M + 1
INC	0x6c	INC		yes	BYTE	BYTE	INDEXED	M = M + 1
INC	0x4c	INCA	REG_A				INHERENT	A = A + 1
INC	0x5c	INCB	REG_B				INHERENT	B = B + 1
JMP	0xe	JMP		yes			DIRECT	pc = EA
JMP	0x7e	JMP		yes			EXTENDED	pc = EA
JMP	0x6e	JMP		yes			INDEXED	pc = EA
JSR	0x9d	JSR		yes			DIRECT	jump to subroutine
JSR	0xbd	JSR		yes			EXTENDED	jump to subroutine
JSR	0xad	JSR		yes			INDEXED	jump to subroutine
BHS	0x1024	LBCC		yes			RELATIVE_WORD	None
BLO	0x1025	LBCS		yes			RELATIVE_WORD	None
BEQ	0x1027	LBEQ		yes			RELATIVE_WORD	None
BGE	0x102c	LBGE		yes			RELATIVE_WORD	None
BGT	0x102e	LBGT		yes			RELATIVE_WORD	None
BHI	0x1022	LBHI		yes			RELATIVE_WORD	None
BLE	0x102f	LBLE		yes			RELATIVE_WORD	None
BLS	0x1023	LBLS		yes			RELATIVE_WORD	None
BLT	0x102d	LBLT		yes			RELATIVE_WORD	None
BMI	0x102b	LBMI		yes			RELATIVE_WORD	None
BNE	0x1026	LBNE		yes			RELATIVE_WORD	None
BPL	0x102a	LBPL		yes			RELATIVE_WORD	None
BRA	0x16	LBRA		yes			RELATIVE_WORD	None
BRN	0x1021	LBRN		yes			RELATIVE_WORD	None
BSR	0x17	LBSR		yes			RELATIVE_WORD	None
BVC	0x1028	LBVC		yes			RELATIVE_WORD	None
BVS	0x1029	LBVS		yes			RELATIVE_WORD	None
LD	0x96	LDA	REG_A		BYTE		DIRECT	A = M
LD	0xb6	LDA	REG_A		BYTE		EXTENDED	A = M
LD	0x86	LDA	REG_A		BYTE		IMMEDIATE	A = M
LD	0xa6	LDA	REG_A		BYTE		INDEXED	A = M
LD	0xd6	LDB	REG_B		BYTE		DIRECT	B = M
LD	0xf6	LDB	REG_B		BYTE		EXTENDED	B = M
LD	0xc6	LDB	REG_B		BYTE		IMMEDIATE	B = M
LD	0xe6	LDB	REG_B		BYTE		INDEXED	B = M
LD	0xdc	LDD	REG_D		WORD		DIRECT_WORD	D = M:M+1
LD	0xfc	LDD	REG_D		WORD		EXTENDED_WORD	D = M:M+1
LD	0xcc	LDD	REG_D		WORD		IMMEDIATE_WORD	D = M:M+1
LD	0xec	LDD	REG_D		WORD		INDEXED_WORD	D = M:M+1
LD	0x10de	LDS	REG_S		WORD		DIRECT_WORD	S = M:M+1
LD	0x10fe	LDS	REG_S		WORD		EXTENDED_WORD	S = M:M+1
LD	0x10ce	LDS	REG_S		WORD		IMMEDIATE_WORD	S = M:M+1
LD	0x10ee	LDS	REG_S		WORD		INDEXED_WORD	S = M:M+1
LD	0xde	LDU	REG_U		WORD		DIRECT_WORD	U = M:M+1
LD	0xfe	LDU	REG_U		WORD		EXTENDED_WORD	U = M:M+1
LD	0xce	LDU	REG_U		WORD		IMMEDIATE_WORD	U = M:M+1
LD	0xee	LDU	REG_U		WORD		INDEXED_WORD	U = M:M+1
LD	0x9e	LDX	REG_X		WORD		DIRECT_WORD	X = M:M+1
LD	0xbe	LDX	REG_X		WORD		EXTENDED_WORD	X = M:M+1
LD	0x8e	LDX	REG_X		WORD		IMMEDIATE_WORD	X = M:M+1
LD	0xae	LDX	REG_X		WORD		INDEXED_WORD	X = M:M+1
LD	0x109e	LDY	REG_Y		WORD		DIRECT_WORD	Y = M:M+1
LD	0x10be	LDY	REG_Y		WORD		EXTENDED_WORD	Y = M:M+1
LD	0x108e	LDY	REG_Y		WORD		IMMEDIATE_WORD	Y = M:M+1
LD	0x10ae	LDY	REG_Y		WORD		INDEXED_WORD	Y = M:M+1
LEA	0x32	LEAS	REG_S	yes			INDEXED	S = EA
LEA	0x33	LEAU	REG_U	yes			INDEXED	U = EA
LEA	0x30	LEAX	REG_X	yes			INDEXED	X = EA
LEA	0x31	LEAY	REG_Y	yes			INDEXED	Y = EA
LSL	0x8	LSL		yes	BYTE	BYTE	DIRECT	M = Logical shift M left
LSL	0x78	LSL		yes	BYTE	BYTE	EXTENDED	M = Logical shift M left
LSL	0x68	LSL		yes	BYTE	BYTE	INDEXED	M = Logical shift M left
LSL	0x48	LSLA	REG_A				INHERENT	A = Logical shift A left
LSL	0x58	LSLB	REG_B				INHERENT	B = Logical shift B left
LSR	0x4	LSR		yes	BYTE	BYTE	DIRECT	M = Logical shift M right
LSR	0x74	LSR		yes	BYTE	BYTE	EXTENDED	M = Logical shift M right
LSR	0x64	LSR		yes	BYTE	BYTE	INDEXED	M = Logical shift M right
LSR	0x44	LSRA	REG_A				INHERENT	A = Logical shift A right
LSR	0x54	LSRB	REG_B				INHERENT	B = Logical shift B right
MUL	0x3d	MUL					INHERENT	D = A*B (Unsigned)
NEG	0x0	NEG		yes	BYTE	BYTE	DIRECT	M = !M + 1
NEG	0x70	NEG		yes	BYTE	BYTE	EXTENDED	M = !M + 1
NEG	0x60	NEG		yes	BYTE	BYTE	INDEXED	M = !M + 1
NEG	0x40	NEGA	REG_A				INHERENT	A = !A + 1
NEG	0x50	NEGB	REG_B				INHERENT	B = !B + 1
NOP	0x12	NOP					INHERENT	No Operation
OR	0x9a	ORA	REG_A		BYTE		DIRECT	A = A || M
OR	0xba	ORA	REG_A		BYTE		EXTENDED	A = A || M
OR	0x8a	ORA	REG_A		BYTE		IMMEDIATE	A = A || M
OR	0xaa	ORA	REG_A		BYTE		INDEXED	A = A || M
OR	0xda	ORB	REG_B		BYTE		DIRECT	B = B || M
OR	0xfa	ORB	REG_B		BYTE		EXTENDED	B = B || M
OR	0xca	ORB	REG_B		BYTE		IMMEDIATE	B = B || M
OR	0xea	ORB	REG_B		BYTE		INDEXED	B = B || M
OR	0x1a	ORCC	REG_CC		BYTE		IMMEDIATE	C = CC || IMM
PAGE	0x10	PAGE 1						Page 1 Instructions prefix
PAGE	0x11	PAGE 2						Page 2 Instructions prefix
PSH	0x34	PSHS	REG_S		BYTE		IMMEDIATE	S -= 1: MEM(S) = R; Push Register on S Stack
PSH	0x36	PSHU	REG_U		BYTE		IMMEDIATE	U -= 1: MEM(U) = R; Push Register on U Stack
PUL	0x35	PULS	REG_S		BYTE		IMMEDIATE	R=MEM(S) : S += 1; Pull register from S Stack
PUL	0x37	PULU	REG_U		BYTE		IMMEDIATE	R=MEM(U) : U += 1; Pull register from U Stack
RESET	0x3e	RESET						Undocumented opcode
ROL	0x9	ROL		yes	BYTE	BYTE	DIRECT	M = Rotate M left thru carry
ROL	0x79	ROL		yes	BYTE	BYTE	EXTENDED	M = Rotate M left thru carry
ROL	0x69	ROL		yes	BYTE	BYTE	INDEXED	M = Rotate M left thru carry
ROL	0x49	ROLA	REG_A				INHERENT	A = Rotate A left thru carry
ROL	0x59	ROLB	REG_B				INHERENT	B = Rotate B left thru carry
ROR	0x6	ROR		yes	BYTE	BYTE	DIRECT	M = Rotate M Right thru carry
ROR	0x76	ROR		yes	BYTE	BYTE	EXTENDED	M = Rotate M Right thru carry
ROR	0x66	ROR		yes	BYTE	BYTE	INDEXED	M = Rotate M Right thru carry
ROR	0x46	RORA	REG_A				INHERENT	A = Rotate A Right thru carry
ROR	0x56	RORB	REG_B				INHERENT	B = Rotate B Right thru carry
RTI	0x3b	RTI					INHERENT	Return from Interrupt
RTS	0x39	RTS					INHERENT	Return from subroutine
SBC	0x92	SBCA	REG_A		BYTE		DIRECT	A = A - M - C
SBC	0xb2	SBCA	REG_A		BYTE		EXTENDED	A = A - M - C
SBC	0x82	SBCA	REG_A		BYTE		IMMEDIATE	A = A - M - C
SBC	0xa2	SBCA	REG_A		BYTE		INDEXED	A = A - M - C
SBC	0xd2	SBCB	REG_B		BYTE		DIRECT	B = B - M - C
SBC	0xf2	SBCB	REG_B		BYTE		EXTENDED	B = B - M - C
SBC	0xc2	SBCB	REG_B		BYTE		IMMEDIATE	B = B - M - C
SBC	0xe2	SBCB	REG_B		BYTE		INDEXED	B = B - M - C
SEX	0x1d	SEX					INHERENT	Sign extend B into A
ST	0x97	STA	REG_A	yes		BYTE	DIRECT	M = A
ST	0xb7	STA	REG_A	yes		BYTE	EXTENDED	M = A
ST	0xa7	STA	REG_A	yes		BYTE	INDEXED	M = A
ST	0xd7	STB	REG_B	yes		BYTE	DIRECT	M = B
ST	0xf7	STB	REG_B	yes		BYTE	EXTENDED	M = B
ST	0xe7	STB	REG_B	yes		BYTE	INDEXED	M = B
ST	0xdd	STD	REG_D	yes		WORD	DIRECT	M:M+1 = D
ST	0xfd	STD	REG_D	yes		WORD	EXTENDED	M:M+1 = D
ST	0xed	STD	REG_D	yes		WORD	INDEXED	M:M+1 = D
ST	0x10df	STS	REG_S	yes		WORD	DIRECT	M:M+1 = S
ST	0x10ff	STS	REG_S	yes		WORD	EXTENDED	M:M+1 = S
ST	0x10ef	STS	REG_S	yes		WORD	INDEXED	M:M+1 = S
ST	0xdf	STU	REG_U	yes		WORD	DIRECT	M:M+1 = U
ST	0xff	STU	REG_U	yes		WORD	EXTENDED	M:M+1 = U
ST	0xef	STU	REG_U	yes		WORD	INDEXED	M:M+1 = U
ST	0x9f	STX	REG_X	yes		WORD	DIRECT	M:M+1 = X
ST	0xbf	STX	REG_X	yes		WORD	EXTENDED	M:M+1 = X
ST	0xaf	STX	REG_X	yes		WORD	INDEXED	M:M+1 = X
ST	0x109f	STY	REG_Y	yes		WORD	DIRECT	M:M+1 = Y
ST	0x10bf	STY	REG_Y	yes		WORD	EXTENDED	M:M+1 = Y
ST	0x10af	STY	REG_Y	yes		WORD	INDEXED	M:M+1 = Y
SUB	0x90	SUBA	REG_A		BYTE		DIRECT	A = A - M
SUB	0xb0	SUBA	REG_A		BYTE		EXTENDED	A = A - M
SUB	0x80	SUBA	REG_A		BYTE		IMMEDIATE	A = A - M
SUB	0xa0	SUBA	REG_A		BYTE		INDEXED	A = A - M
SUB	0xd0	SUBB	REG_B		BYTE		DIRECT	B = B - M
SUB	0xf0	SUBB	REG_B		BYTE		EXTENDED	B = B - M
SUB	0xc0	SUBB	REG_B		BYTE		IMMEDIATE	B = B - M
SUB	0xe0	SUBB	REG_B		BYTE		INDEXED	B = B - M
SUB	0x93	SUBD	REG_D		WORD		DIRECT_WORD	D = D - M:M+1
SUB	0xb3	SUBD	REG_D		WORD		EXTENDED_WORD	D = D - M:M+1
SUB	0x83	SUBD	REG_D		WORD		IMMEDIATE_WORD	D = D - M:M+1
SUB	0xa3	SUBD	REG_D		WORD		INDEXED_WORD	D = D - M:M+1
SWI	0x3f	SWI					INHERENT	Software interrupt 1
SWI	0x103f	SWI2					INHERENT	Software interrupt 2
SWI	0x113f	SWI3					INHERENT	Software interrupt 3
SYNC	0x13	SYNC					INHERENT	Synchronize to Interrupt
TFR	0x1f	TFR			BYTE		IMMEDIATE	None
TST	0xd	TST					DIRECT	Test M
TST	0x7d	TST					EXTENDED	Test M
TST	0x6d	TST					INDEXED	Test M
TST	0x4d	TSTA	REG_A				INHERENT	Test A
TST	0x5d	TSTB	REG_B				INHERENT	Test B
